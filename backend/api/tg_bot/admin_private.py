from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton,WebAppInfo
from aiogram import Bot
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InputFile, FSInputFile

from api.models import Users
from api.tg_bot.database import *
from api.tg_bot.classes_functions import Admin
import api.tg_bot.reply as kb

from asgiref.sync import sync_to_async
from decimal import Decimal 
import django.contrib
from openpyxl import Workbook
from PIL import Image
import aiofiles
import openpyxl
import os

admin_private = Router()

bot = Bot('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I', default=DefaultBotProperties(parse_mode=ParseMode.HTML))

async def get_users_by_subscription(segment):
    if segment == 'paid':
        return await sync_to_async(list)(Users.objects.filter(paid=True))
    elif segment == 'free':
        return await sync_to_async(list)(Users.objects.filter(paid=False))

async def send_users_xlsx(chat_id):
    workbook = Workbook()
    sheet = workbook.active
    sheet.title = "Users Data"

    headers = ["Telegram ID", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è", "–°—Ç—Ä–∞–Ω–∞", "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"]
    sheet.append(headers)

    users = await sync_to_async(list)(Users.objects.all())

    for user in users:
        country_name = await sync_to_async(lambda: user.country.country_name if user.country else "–ù–µ—Ç")()
        
        sheet.append([
            user.tg_id,
            user.tg_username,
            user.name,
            country_name,
            "–î–∞" if user.paid else "–ù–µ—Ç"
        ])

    file_path = 'users_data.xlsx'
    workbook.save(file_path)

    input_file = FSInputFile(path=file_path)

    await bot.send_document(chat_id=chat_id, document=input_file)

    os.remove(file_path)

@admin_private.message(Command('admin'))
async def admin_panel(message: Message):
    is_admin = await check_admin(message.from_user.id)
    if is_admin:
        await message.answer('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())

@admin_private.callback_query(F.data == 'statistics')
async def statistics(callback: CallbackQuery):
    await callback.answer()
    all_users = await get_users() 
    active_users = await get_users_status() 
    inactive_users = await get_users_status2() 
    
    total_payments = await get_total_payments()
    today_payments = await get_today_payments()
    week_payments = await get_week_payments()
    month_payments = await get_month_payments()
    
    await callback.message.answer('üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> \n'
                                  f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{all_users}</b> \n'
                                  f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b> \n'
                                  f'–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{inactive_users}</b> \n'
                                  '\n'
                                  'üì¶ <b>–ü–æ–∫—É–ø–∫–∏/–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b> \n'
                                  f'–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: <b>{total_payments}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_payments}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{week_payments}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü: <b>{month_payments}</b>')

@admin_private.callback_query(F.data == 'mailing')
async def post_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.mailing_state_type)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=kb.post_type2())

@admin_private.message(Admin.mailing_state_type)
async def choose_mailing_segment(message: Message, state: FSMContext):
    if message.text == "–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏":
        await state.update_data(segment='paid')
    elif message.text == "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏":
        await state.update_data(segment='free')
    await state.set_state(Admin.mailing_state)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=kb.post_type())

@admin_private.message(Admin.mailing_state)
async def proccess_text1(message: Message, state: FSMContext):
    if message.text == "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç":
        await state.set_state(Admin.mailing_text_only)
    elif message.text == "–° —Ñ–æ—Ç–æ":
        await state.set_state(Admin.mailing_text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=ReplyKeyboardRemove())

@admin_private.message(Admin.mailing_text_only)
async def proccess_text2(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.text)
    await state.set_state(Admin.ask)
    await message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É \"<b>–°–º–æ—Ç—Ä–µ—Ç—å</b>\"?', reply_markup=kb.set_watch_btn())

@admin_private.message(Admin.mailing_text, F.photo)
async def proccess_text3(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.caption)
    await state.update_data(mailing_photo=message.photo[-1].file_id)
    await state.set_state(Admin.ask)
    await message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É \"<b>–°–º–æ—Ç—Ä–µ—Ç—å</b>\"?', reply_markup=kb.set_watch_btn())

@admin_private.message(Admin.ask)
async def procces_ask(message: Message, state: FSMContext):
    await state.update_data(ask=message.text)
    data = await state.get_data()
    if 'mailing_photo' in data:
        photo = data['mailing_photo']
        caption = data['mailing_text']
        text = data['ask']

        if not text:
            text = ""

        if not caption:
            caption = ""

        if message.text == '–î–∞' or  message.text == '–¥–∞':
            await state.set_state(Admin.confirm_yes)
            await message.answer_photo(photo=photo, caption=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button())

        elif message.text == '–ù–µ—Ç' or  message.text == '–Ω–µ—Ç':
            await state.set_state(Admin.confirm_no)
            
            await message.answer_photo(photo=photo, caption=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button())
    else:
        caption = data['mailing_text']
        text = data['ask']

        if not caption:
            caption = ""

        if message.text == '–î–∞' or  message.text == '–¥–∞':
            await state.set_state(Admin.confirm_yes)
            await message.answer(text=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button())

        elif message.text == '–ù–µ—Ç' or  message.text == '–Ω–µ—Ç':
            await state.set_state(Admin.confirm_no)
            await message.answer(text=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button())
@admin_private.message(Admin.confirm_yes)
async def procces_post_yes(message: Message, state: FSMContext):
    await state.update_data(confirm_yes=message.text)
    data = await state.get_data()
    text = data['confirm_yes']
    segment = data.get('segment')

    if text == '–î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å':
        users = await get_users_by_subscription(segment)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ tg_id

        if 'mailing_photo' in data:
            counter = 0
            caption = data['mailing_text']
            photo = data['mailing_photo']

            for user in users:
                tg_id = user.tg_id
                await message.bot.send_photo(tg_id, photo=photo, caption=caption, reply_markup=kb.get_order_post())
                counter += 1

            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                 f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{counter} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                 reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
        else:
            counter = 0
            for user in users:
                tg_id = user.tg_id
                await message.bot.send_message(tg_id, f'{data["mailing_text"]}', reply_markup=kb.get_order_post())
                counter += 1

            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                 f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{counter} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                 reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()

    if text == '–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await message.answer('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())

@admin_private.message(Admin.confirm_no)
async def procces_post_no(message: Message, state: FSMContext):
    await state.update_data(confirm_yes=message.text)
    data = await state.get_data()
    text = data['confirm_yes']
    segment = data.get('segment')

    if text == '–î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å':
        users = await get_users_by_subscription(segment)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ tg_id

        if 'mailing_photo' in data:
            counter = 0
            caption = data['mailing_text']
            photo = data['mailing_photo']
            for user in users:
                tg_id = user.tg_id
                await message.bot.send_photo(tg_id, photo=photo, caption=caption)
                counter += 1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                 f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{counter} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                 reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
        else:
            counter = 0
            for user in users:
                tg_id = user.tg_id
                await message.bot.send_message(tg_id, f'{data["mailing_text"]}')
                counter += 1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                 f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{counter} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                 reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()

    if text == '–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await message.answer('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())



@admin_private.callback_query(F.data == 'download_db')
async def download_db(callback: CallbackQuery):
    await callback.answer()
    is_admin = await check_admin(callback.from_user.id)
    if is_admin:
        await send_users_xlsx(callback.from_user.id)




@admin_private.callback_query(F.data == 'controll')
async def controll(callback: CallbackQuery):
    await callback.answer()
    is_admin = await check_admin(callback.from_user.id)
    if is_admin:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=kb.price_controll())
    


@admin_private.callback_query(F.data == 'user_present')
async def user_present(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(r'–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /update_price {–¢–ò–ü} {TELEGRAM_ID –∏–ª–∏ –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø} {–¶–ï–ù–ê} {–¶–ï–ù–ê –í TG Stars} '
                                  '\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \n/update_price month 5128389615 100 10\n/update_price year @username 150 15', 
                                  reply_markup=kb.admin_panel())

@admin_private.message(Command('update_price'))
async def user_present_func(message: Message):
    is_admin = await check_admin(message.from_user.id)
    if is_admin:
        text = message.text
        text2 = text.split(' ')
        if len(text2) != 5:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç update_price, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb.admin_panel())
            return
        
        types = text2[1]  
        user_data = text2[2]  
        price = text2[3]  
        stars_price = text2[4]  

        try:
            new_price_instance = await update_price_personal(types, user_data, price, stars_price)
            await message.answer(f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {new_price_instance}', reply_markup=kb.admin_panel())
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {str(e)}', reply_markup=kb.admin_panel())


@admin_private.callback_query(F.data == 'group_present')
async def group_present(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(r'–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /update_group_price {–¢–ò–ü} {TGID,TGID,TGID} {–¶–ï–ù–ê} {–¶–ï–ù–ê –í TG Stars} '
                                  '\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \n/update_group_price month 123456789,987654321 100 10', 
                                  reply_markup=kb.admin_panel())

@admin_private.message(Command('update_group_price'))
async def update_group_price_func(message: Message):
    is_admin = await check_admin(message.from_user.id)
    if is_admin:
        text = message.text
        text2 = text.split(' ')
        
        if len(text2) != 5:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç update_group_price, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb.admin_panel())
            return
        
        types = text2[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø
        user_ids = text2[2].split(',')  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ TGID
        price = text2[3]  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        stars_price = text2[4]  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ TG Stars

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ
        try:
            new_price_instances = []
            for user_id in user_ids:
                new_price_instance = await update_price_personal2(types, user_id, price, stars_price)
                if new_price_instance:
                    new_price_instances.append(new_price_instance)
            
            if new_price_instances:
                await message.answer(f'–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {len(new_price_instances)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=kb.admin_panel())
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=kb.admin_panel())
        
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω: {str(e)}', reply_markup=kb.admin_panel())


@admin_private.callback_query(F.data == 'update_price')
async def update_price_all(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(r'–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /update_all_price {–¢–ò–ü} {–¶–ï–ù–ê} {–¶–ï–ù–ê –í TG Stars}\n –∏–ª–∏\n /update_all_price_serial {–ü–û–õ–ù–û–ï –ò–ú–Ø} {–¶–ï–ù–ê} {–¶–ï–ù–ê –í TG Stars} - –¥–ª—è —Å–µ—Ä–∏–∞–ª–∞'
                                  '\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \n/update_all_price month 100 10', 
                                  reply_markup=kb.admin_panel())





@admin_private.message(Command('update_all_price'))
async def update_group_price_func(message: Message):
    is_admin = await check_admin(message.from_user.id)
    if is_admin:
        text = message.text
        text2 = text.split(' ')
        
        if len(text2) != 4:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç update_all_price, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb.admin_panel())
            return
        
        types = text2[1]  
        rubs = text2[2]  
        stars = text2[3]

        try:
            new_price_instance = await update_price_for_all(types, rubs, stars)
            await message.answer(f'–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å', reply_markup=kb.admin_panel())
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω: {str(e)}', reply_markup=kb.admin_panel())

@admin_private.message(Command('update_all_price_serial'))
async def update_group_price_func(message: Message):
    is_admin = await check_admin(message.from_user.id)
    if is_admin:
        text = message.text
        text2 = text.split(' ')
        
        if len(text2) != 4:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç update_all_price_serial, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb.admin_panel())
            return
        
        serail_name = text2[1]  
        rubs = text2[2]  
        stars = text2[3]

        try:
            new_price_instance = await update_price_for_serail(serail_name, rubs, stars)
            await message.answer(f'–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å', reply_markup=kb.admin_panel())
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω: {str(e)}', reply_markup=kb.admin_panel())












