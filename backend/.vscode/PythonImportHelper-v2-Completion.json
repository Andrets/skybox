[
    {
        "label": "django.contrib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib",
        "description": "django.contrib",
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "api.storage_backends",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api.storage_backends",
        "description": "api.storage_backends",
        "detail": "api.storage_backends",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "CommandStart",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "CommandStart",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "CallbackQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardRemove",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "KeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "WebAppInfo",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InputFile",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "FSInputFile",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "KeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "WebAppInfo",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "CallbackQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardRemove",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "LabeledPrice",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "PreCheckoutQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "SuccessfulPayment",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "CallbackQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardRemove",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "KeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "WebAppInfo",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "CallbackQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardRemove",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "LabeledPrice",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "PreCheckoutQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "SuccessfulPayment",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommandScopeAllPrivateChats",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "DefaultBotProperties",
        "importPath": "aiogram.client.bot",
        "description": "aiogram.client.bot",
        "isExtraImport": true,
        "detail": "aiogram.client.bot",
        "documentation": {}
    },
    {
        "label": "DefaultBotProperties",
        "importPath": "aiogram.client.bot",
        "description": "aiogram.client.bot",
        "isExtraImport": true,
        "detail": "aiogram.client.bot",
        "documentation": {}
    },
    {
        "label": "DefaultBotProperties",
        "importPath": "aiogram.client.bot",
        "description": "aiogram.client.bot",
        "isExtraImport": true,
        "detail": "aiogram.client.bot",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Admins",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Payments",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Admins",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "isExtraImport": true,
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "isExtraImport": true,
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "isExtraImport": true,
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "isExtraImport": true,
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "api.tg_bot.classes_functions",
        "description": "api.tg_bot.classes_functions",
        "isExtraImport": true,
        "detail": "api.tg_bot.classes_functions",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "api.tg_bot.classes_functions",
        "description": "api.tg_bot.classes_functions",
        "isExtraImport": true,
        "detail": "api.tg_bot.classes_functions",
        "documentation": {}
    },
    {
        "label": "api.tg_bot.reply",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "api.tg_bot.user_private",
        "description": "api.tg_bot.user_private",
        "isExtraImport": true,
        "detail": "api.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "MemoryStorage",
        "importPath": "aiogram.fsm.storage.memory",
        "description": "aiogram.fsm.storage.memory",
        "isExtraImport": true,
        "detail": "aiogram.fsm.storage.memory",
        "documentation": {}
    },
    {
        "label": "MemoryStorage",
        "importPath": "aiogram.fsm.storage.memory",
        "description": "aiogram.fsm.storage.memory",
        "isExtraImport": true,
        "detail": "aiogram.fsm.storage.memory",
        "documentation": {}
    },
    {
        "label": "Birthdate",
        "importPath": "aiogram.types.birthdate",
        "description": "aiogram.types.birthdate",
        "isExtraImport": true,
        "detail": "aiogram.types.birthdate",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "GetUserProfilePhotos",
        "importPath": "aiogram.methods.get_user_profile_photos",
        "description": "aiogram.methods.get_user_profile_photos",
        "isExtraImport": true,
        "detail": "aiogram.methods.get_user_profile_photos",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "StreamingHttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "truncatechars",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rest_framework",
        "description": "rest_framework",
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "authentication",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "parse_datetime",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qsl",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Ingredients",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Orders",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Admins",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Order_list",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Orders",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Order_list",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "check_admin",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "fetch_order_by_id",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "fetch_orders",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "count_orders",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users_status",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_pos",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "add_phone_number",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "add_user",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "create_order",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "d_success",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_order_by_id",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "do_paid",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "isExtraImport": true,
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "main.tg_bot.classes_functions",
        "description": "main.tg_bot.classes_functions",
        "isExtraImport": true,
        "detail": "main.tg_bot.classes_functions",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "main.tg_bot.classes_functions",
        "description": "main.tg_bot.classes_functions",
        "isExtraImport": true,
        "detail": "main.tg_bot.classes_functions",
        "documentation": {}
    },
    {
        "label": "main.tg_bot.reply",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "Nominatim",
        "importPath": "geopy.geocoders",
        "description": "geopy.geocoders",
        "isExtraImport": true,
        "detail": "geopy.geocoders",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "yookassa",
        "description": "yookassa",
        "isExtraImport": true,
        "detail": "yookassa",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "yookassa",
        "description": "yookassa",
        "isExtraImport": true,
        "detail": "yookassa",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "isExtraImport": true,
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "notify_user",
        "importPath": "api.tg_bot.track_orders",
        "description": "api.tg_bot.track_orders",
        "isExtraImport": true,
        "detail": "api.tg_bot.track_orders",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AdminkaConfig",
        "kind": 6,
        "importPath": "adminka.apps",
        "description": "adminka.apps",
        "peekOfCode": "class AdminkaConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'adminka'",
        "detail": "adminka.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0001_initial",
        "description": "api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Admins',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('tg_id', models.BigIntegerField(verbose_name='Админы')),",
        "detail": "api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0002_comments_serail_history_series_statusnew",
        "description": "api.migrations.0002_comments_serail_history_series_statusnew",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Comments',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('text', models.TextField(blank=True, null=True, verbose_name='Текст комментария')),",
        "detail": "api.migrations.0002_comments_serail_history_series_statusnew",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0003_payments",
        "description": "api.migrations.0003_payments",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0002_comments_serail_history_series_statusnew'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payments',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('summa', models.BigIntegerField(default=0, null=True, verbose_name='Сумма оплаты')),",
        "detail": "api.migrations.0003_payments",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0004_users_paid",
        "description": "api.migrations.0004_users_paid",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0003_payments'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='users',\n            name='paid',\n            field=models.BooleanField(default=False, verbose_name='Имел/Имеет платную подписку'),\n        ),",
        "detail": "api.migrations.0004_users_paid",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0005_alter_serail_options_comments_serail_and_more",
        "description": "api.migrations.0005_alter_serail_options_comments_serail_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0004_users_paid'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='serail',\n            options={'verbose_name': 'Сериал', 'verbose_name_plural': 'Сериалы'},\n        ),\n        migrations.AddField(",
        "detail": "api.migrations.0005_alter_serail_options_comments_serail_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0006_users_search_history",
        "description": "api.migrations.0006_users_search_history",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0005_alter_serail_options_comments_serail_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='users',\n            name='search_history',\n            field=models.JSONField(default=list, verbose_name='История поиска'),\n        ),",
        "detail": "api.migrations.0006_users_search_history",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0007_docstexts",
        "description": "api.migrations.0007_docstexts",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0006_users_search_history'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DocsTexts',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(choices=[('TERMS_OF_USE', 'TERMS_OF_USE'), ('PRIVACY_POLICY', 'PRIVACY_POLICY'), ('DMCA', 'DMCA')], max_length=250, verbose_name='Статус')),",
        "detail": "api.migrations.0007_docstexts",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0008_serail_lang",
        "description": "api.migrations.0008_serail_lang",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0007_docstexts'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='serail',\n            name='lang',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.language'),\n        ),",
        "detail": "api.migrations.0008_serail_lang",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0009_serail_is_original_serail_views",
        "description": "api.migrations.0009_serail_is_original_serail_views",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0008_serail_lang'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='serail',\n            name='is_original',\n            field=models.BooleanField(default=False, verbose_name='Является оригиналом'),\n        ),",
        "detail": "api.migrations.0009_serail_is_original_serail_views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0010_statusnew_added_date",
        "description": "api.migrations.0010_statusnew_added_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0009_serail_is_original_serail_views'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='statusnew',\n            name='added_date',\n            field=models.DateField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='Дата добавления статуса'),\n            preserve_default=False,",
        "detail": "api.migrations.0010_statusnew_added_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0011_payments_done_date_alter_docstexts_name_favorite",
        "description": "api.migrations.0011_payments_done_date_alter_docstexts_name_favorite",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0010_statusnew_added_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='docstexts',\n            name='name',\n            field=models.CharField(choices=[('TERMS_OF_USE', 'TERMS_OF_USE'), ('PRIVACY_POLICY', 'PRIVACY_POLICY'), ('DMCA', 'DMCA')], max_length=250, verbose_name='Имя'),\n        ),",
        "detail": "api.migrations.0011_payments_done_date_alter_docstexts_name_favorite",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0012_alter_serail_vertical_photo_permissionsmodel",
        "description": "api.migrations.0012_alter_serail_vertical_photo_permissionsmodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0011_payments_done_date_alter_docstexts_name_favorite'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='serail',\n            name='vertical_photo',\n            field=models.ImageField(blank=True, null=True, upload_to='static/media/serail/', verbose_name='Вертикальная обложка'),\n        ),",
        "detail": "api.migrations.0012_alter_serail_vertical_photo_permissionsmodel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0013_alter_users_photo",
        "description": "api.migrations.0013_alter_users_photo",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0012_alter_serail_vertical_photo_permissionsmodel'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='users',\n            name='photo',\n            field=models.ImageField(null=True, upload_to='static/media/users/', verbose_name='Аватарка пользователя'),\n        ),",
        "detail": "api.migrations.0013_alter_users_photo",
        "documentation": {}
    },
    {
        "label": "admin_private",
        "kind": 5,
        "importPath": "api.tg_bot.admin_private",
        "description": "api.tg_bot.admin_private",
        "peekOfCode": "admin_private = Router()\nbot = Bot('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I', default=DefaultBotProperties(parse_mode=ParseMode.HTML))\nasync def get_users_by_subscription(segment):\n    if segment == 'paid':\n        return await sync_to_async(list)(Users.objects.filter(paid=True))\n    elif segment == 'free':\n        return await sync_to_async(list)(Users.objects.filter(paid=False))\nasync def send_users_xlsx(chat_id):\n    workbook = Workbook()\n    sheet = workbook.active",
        "detail": "api.tg_bot.admin_private",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "api.tg_bot.admin_private",
        "description": "api.tg_bot.admin_private",
        "peekOfCode": "bot = Bot('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I', default=DefaultBotProperties(parse_mode=ParseMode.HTML))\nasync def get_users_by_subscription(segment):\n    if segment == 'paid':\n        return await sync_to_async(list)(Users.objects.filter(paid=True))\n    elif segment == 'free':\n        return await sync_to_async(list)(Users.objects.filter(paid=False))\nasync def send_users_xlsx(chat_id):\n    workbook = Workbook()\n    sheet = workbook.active\n    sheet.title = \"Users Data\"",
        "detail": "api.tg_bot.admin_private",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "api.tg_bot.classes_functions",
        "description": "api.tg_bot.classes_functions",
        "peekOfCode": "class Admin(StatesGroup):\n    mailing_state = State()\n    mailing_state_type = State()\n    mailing_text = State()\n    mailing_text_only = State()\n    ask = State()\n    confirm_yes = State()\n    confirm_no = State()\n    name = State()\n    genre = State()",
        "detail": "api.tg_bot.classes_functions",
        "documentation": {}
    },
    {
        "label": "translate_it",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def translate_it(text, target_lang):\n        if not text:\n            return '' \n        translator = Translator()\n        translated = translator.translate(text, dest=target_lang)\n        return translated.text\n@sync_to_async\ndef check_admin(user_id):\n    if not Admins.objects.filter(tg_id=user_id).exists():\n        return False",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "check_admin",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def check_admin(user_id):\n    if not Admins.objects.filter(tg_id=user_id).exists():\n        return False\n    return True\n@sync_to_async\ndef get_users_post():\n    queryset = Users.objects.all().values('tg_id')\n    return list(queryset)\n@sync_to_async\ndef get_users():",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users_post",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_users_post():\n    queryset = Users.objects.all().values('tg_id')\n    return list(queryset)\n@sync_to_async\ndef get_users():\n    queryset = Users.objects.all().values('tg_id')\n    return len(list(queryset))\n@sync_to_async\ndef get_users_status():\n    return Users.objects.filter(isActive=True).count()",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_users():\n    queryset = Users.objects.all().values('tg_id')\n    return len(list(queryset))\n@sync_to_async\ndef get_users_status():\n    return Users.objects.filter(isActive=True).count()\n@sync_to_async\ndef get_users_status2():\n    return Users.objects.filter(isActive=False).count()\n@sync_to_async",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users_status",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_users_status():\n    return Users.objects.filter(isActive=True).count()\n@sync_to_async\ndef get_users_status2():\n    return Users.objects.filter(isActive=False).count()\n@sync_to_async\ndef get_total_payments():\n    return Payments.objects.count()\n@sync_to_async\ndef get_today_payments():",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users_status2",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_users_status2():\n    return Users.objects.filter(isActive=False).count()\n@sync_to_async\ndef get_total_payments():\n    return Payments.objects.count()\n@sync_to_async\ndef get_today_payments():\n    today = timezone.now().date()\n    return Payments.objects.filter(create_date__date=today).count()\n@sync_to_async",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_total_payments",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_total_payments():\n    return Payments.objects.count()\n@sync_to_async\ndef get_today_payments():\n    today = timezone.now().date()\n    return Payments.objects.filter(create_date__date=today).count()\n@sync_to_async\ndef get_week_bookings_count():\n    today = timezone.now().date()\n    week_start = today - timedelta(days=today.weekday())",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_today_payments",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_today_payments():\n    today = timezone.now().date()\n    return Payments.objects.filter(create_date__date=today).count()\n@sync_to_async\ndef get_week_bookings_count():\n    today = timezone.now().date()\n    week_start = today - timedelta(days=today.weekday())\n    return Payments.objects.filter(create_date__date__gte=week_start, create_date__date__lte=today).count()\n@sync_to_async\ndef get_month_payments():",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_week_bookings_count",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_week_bookings_count():\n    today = timezone.now().date()\n    week_start = today - timedelta(days=today.weekday())\n    return Payments.objects.filter(create_date__date__gte=week_start, create_date__date__lte=today).count()\n@sync_to_async\ndef get_month_payments():\n    today = timezone.now().date()\n    month_start = today.replace(day=1)\n    return Payments.objects.filter(create_date__date__gte=month_start, create_date__date__lte=today).count()\n@sync_to_async",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_month_payments",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_month_payments():\n    today = timezone.now().date()\n    month_start = today.replace(day=1)\n    return Payments.objects.filter(create_date__date__gte=month_start, create_date__date__lte=today).count()\n@sync_to_async\ndef get_language(language_code):\n    try:\n        lang = Language.objects.get(lang_name__iexact=language_code)\n        return lang\n    except ObjectDoesNotExist:",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_language",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def get_language(language_code):\n    try:\n        lang = Language.objects.get(lang_name__iexact=language_code)\n        return lang\n    except ObjectDoesNotExist:\n        return None  \n# ---------------------\n# POST\n# ---------------------\n@sync_to_async",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "add_user_data",
        "kind": 2,
        "importPath": "api.tg_bot.database",
        "description": "api.tg_bot.database",
        "peekOfCode": "def add_user_data(tg_id, tg_username, name, photo, lang_code):\n    LANGUAGE_COUNTRY_MAP = {\n        \"ru\": \"Россия\",\n        \"en\": \"США\",\n        \"zh\": \"Китай\",\n        \"ko\": \"Южная Корея\",\n        \"tr\": \"Турция\",\n        \"ar\": \"Арабские страны\"\n    }\n    country = Country.objects.filter(country_name__iexact=lang_code).first() ",
        "detail": "api.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "translate_it",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def translate_it(text, target_lang):\n        if not text:\n            return '' \n        translator = Translator()\n        translated = translator.translate(text, dest=target_lang)\n        return translated.text\ndef start_inline(lang) -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    text = translate_it('Начать', lang)\n    keyboard.button(text=f'👉 {text}', web_app=WebAppInfo(text='Начать', url='https://skybox.video/'))",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "start_inline",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def start_inline(lang) -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    text = translate_it('Начать', lang)\n    keyboard.button(text=f'👉 {text}', web_app=WebAppInfo(text='Начать', url='https://skybox.video/'))\n    return keyboard.adjust(1).as_markup()\ndef admin_panel() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text='Статистика', callback_data='statistics')\n    keyboard.button(text='Рассылка', callback_data='mailing')\n    keyboard.button(text='Добавить сериал', callback_data='add_serial')",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "admin_panel",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def admin_panel() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text='Статистика', callback_data='statistics')\n    keyboard.button(text='Рассылка', callback_data='mailing')\n    keyboard.button(text='Добавить сериал', callback_data='add_serial')\n    keyboard.button(text='Скачать базу данных', callback_data='download_db')\n    keyboard.button(text='Управление акциями', callback_data='controll')\n    return keyboard.adjust(1).as_markup()\ndef post_type() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "post_type",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def post_type() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Только текст')\n    keyboard.button(text='С фото')\n    return keyboard.as_markup(resize_keyboard=True)\ndef set_watch_btn() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да')\n    keyboard.button(text='Нет')\n    return keyboard.as_markup(resize_keyboard=True)",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "set_watch_btn",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def set_watch_btn() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да')\n    keyboard.button(text='Нет')\n    return keyboard.as_markup(resize_keyboard=True)\ndef choice_button() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да, выполнить')\n    keyboard.button(text='Нет, вернуться')\n    return keyboard.as_markup(resize_keyboard=True)",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "choice_button",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def choice_button() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да, выполнить')\n    keyboard.button(text='Нет, вернуться')\n    return keyboard.as_markup(resize_keyboard=True)\ndef subscription_type() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardMarkup(row_width=2)\n    keyboard.add(\n        InlineKeyboardButton(\"Платные\", callback_data=\"paid\"),\n        InlineKeyboardButton(\"Бесплатные\", callback_data=\"free\")",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "subscription_type",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def subscription_type() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardMarkup(row_width=2)\n    keyboard.add(\n        InlineKeyboardButton(\"Платные\", callback_data=\"paid\"),\n        InlineKeyboardButton(\"Бесплатные\", callback_data=\"free\")\n    )\n    return keyboard\ndef post_type2() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Платные подписчики')",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "post_type2",
        "kind": 2,
        "importPath": "api.tg_bot.reply",
        "description": "api.tg_bot.reply",
        "peekOfCode": "def post_type2() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Платные подписчики')\n    keyboard.button(text='Бесплатные подписчики')\n    return keyboard.as_markup(resize_keyboard=True)",
        "detail": "api.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "user_private",
        "kind": 5,
        "importPath": "api.tg_bot.user_private",
        "description": "api.tg_bot.user_private",
        "peekOfCode": "user_private = Router()\nbot = Bot('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I', default=DefaultBotProperties(parse_mode=ParseMode.HTML))\n@user_private.message(CommandStart())\nasync def start_message(message: Message, bot: Bot):\n    language_code = str(message.from_user.language_code)\n    if language_code == \"ru\":\n        await message.answer('🎬 Добро пожаловать в SKYBOX!\\n'\n                            '\\n'\n                            'Ваш идеальный помощник для просмотра сериалов.\\n'\n                            '\\n'",
        "detail": "api.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "api.tg_bot.user_private",
        "description": "api.tg_bot.user_private",
        "peekOfCode": "bot = Bot('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I', default=DefaultBotProperties(parse_mode=ParseMode.HTML))\n@user_private.message(CommandStart())\nasync def start_message(message: Message, bot: Bot):\n    language_code = str(message.from_user.language_code)\n    if language_code == \"ru\":\n        await message.answer('🎬 Добро пожаловать в SKYBOX!\\n'\n                            '\\n'\n                            'Ваш идеальный помощник для просмотра сериалов.\\n'\n                            '\\n'\n                            '📺 Здесь вы можете:\\n'",
        "detail": "api.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "UsersAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class UsersAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['isActive']\n    fields = ('tg_id', 'tg_username', 'name', 'photo', 'lang', 'country', 'isActive', 'paid', 'search_history')\n    def get_readonly_fields(self, request, obj=None):\n        if obj:  \n            return ['tg_id','paid']\n        return []\n    class Meta:\n        model = Users",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "LanguageAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class LanguageAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('lang_name',)\n    class Meta:\n        model = Language\nadmin.site.register(Language, LanguageAdmin)\nclass CountryAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('country_name', 'country_lang')\n    class Meta:",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "CountryAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class CountryAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('country_name', 'country_lang')\n    class Meta:\n        model = Country\nadmin.site.register(Country, CountryAdmin)\nclass AdminsAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('tg_id',)\n    class Meta:",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "AdminsAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class AdminsAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('tg_id',)\n    class Meta:\n        model = Admins\nadmin.site.register(Admins, AdminsAdmin)\nclass GenreAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('genre',)\n    class Meta:",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "GenreAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class GenreAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('genre',)\n    class Meta:\n        model = Genre\nadmin.site.register(Genre, GenreAdmin)\n\"\"\" def has_delete_permission(self, request, obj=None):\n        return False\n    def has_add_permission(self, request):\n        return False \"\"\"",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "SeriesInline",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class SeriesInline(admin.TabularInline):\n    model = Series\n    extra = 1  # Количество пустых форм для добавления новых серий\n    fields = ('episode', 'name', 'likes', 'video')\n    readonly_fields = ('likes',)\nclass SerailAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['genre']\n    search_fields = ['name', 'genre__genre']\n    fields = (",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "SerailAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class SerailAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['genre']\n    search_fields = ['name', 'genre__genre']\n    fields = (\n        'name',\n        'vertical_photo',\n        'horizontal_photo0',\n        'horizontal_photo1',\n        'horizontal_photo2',",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "SeriesAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class SeriesAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['serail', 'episode']\n    search_fields = ['name', 'serail__name']\n    fields = ('serail', 'episode', 'name', 'likes', 'video')\n    class Meta:\n        model = Series\nadmin.site.register(Series, SeriesAdmin)\nclass CommentsAdmin(admin.ModelAdmin):\n    list_per_page = 500",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "CommentsAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class CommentsAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['user']\n    search_fields = ['user__name', 'text',  'serail']\n    fields = ('text', 'user', 'serail')\n    class Meta:\n        model = Comments\nadmin.site.register(Comments, CommentsAdmin)\nclass HistoryAdmin(admin.ModelAdmin):\n    list_per_page = 500",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "HistoryAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class HistoryAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['user', 'serail']\n    search_fields = ['user__name', 'serail__name']\n    class Meta:\n        model = History\nadmin.site.register(History, HistoryAdmin)\nclass StatusNewAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['serail']",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "StatusNewAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class StatusNewAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    list_filter = ['serail']\n    search_fields = ['serail__name']\n    class Meta:\n        model = StatusNew\nadmin.site.register(StatusNew, StatusNewAdmin)\nclass PaymentsAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('user', 'summa')",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "PaymentsAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class PaymentsAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('user', 'summa')\n    def get_readonly_fields(self, request, obj=None):\n        if obj:  \n            return ['user', 'summa']\n        return []\n    def has_delete_permission(self, request, obj=None):\n        return False\n    def has_add_permission(self, request):",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "DocsTextsAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class DocsTextsAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('name', 'lang', 'text')\n    class Meta:\n        model = DocsTexts\nadmin.site.register(DocsTexts, DocsTextsAdmin)\nclass ViewedSeriesAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('user', 'series', 'viewed_at')\n    class Meta:",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "ViewedSeriesAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class ViewedSeriesAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('user', 'series', 'viewed_at')\n    class Meta:\n        model = ViewedSeries\nadmin.site.register(ViewedSeries, ViewedSeriesAdmin)\nclass PermissionsModelAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('series', 'user')\n    class Meta:",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "PermissionsModelAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class PermissionsModelAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('series', 'user')\n    class Meta:\n        model = PermissionsModel\nadmin.site.register(PermissionsModel, PermissionsModelAdmin)\nclass FavoriteAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('serail', 'user')\n    class Meta:",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "FavoriteAdmin",
        "kind": 6,
        "importPath": "api.admin",
        "description": "api.admin",
        "peekOfCode": "class FavoriteAdmin(admin.ModelAdmin):\n    list_per_page = 500\n    fields = ('serail', 'user')\n    class Meta:\n        model = Favorite\nadmin.site.register(Favorite, FavoriteAdmin)",
        "detail": "api.admin",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "api.apps",
        "description": "api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'\n    def ready(self):\n        from  api.tasks import start_scheduler\n        start_scheduler()",
        "detail": "api.apps",
        "documentation": {}
    },
    {
        "label": "Language",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Language(models.Model):\n    lang_name = models.CharField('Имя языка на анг.', null=True, max_length=300, blank=True)\n    list_per_page = 500\n    def __str__(self):\n        return str(self.lang_name)\n    class Meta:\n        verbose_name = 'Язык'\n        verbose_name_plural = 'Языки'\nclass Country(models.Model):\n    country_name = models.CharField('Имя страны на анг.',null=True, max_length=300, blank=True)",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Country(models.Model):\n    country_name = models.CharField('Имя страны на анг.',null=True, max_length=300, blank=True)\n    country_lang = models.ForeignKey(Language, on_delete=models.SET_NULL, null=True)\n    list_per_page = 500\n    def __str__(self):\n        return f'{self.country_name}'\n    class Meta:\n        verbose_name = 'Страна'\n        verbose_name_plural = 'Страны'\nclass Users(models.Model):",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Users(models.Model):\n    tg_id = models.BigIntegerField('Telegram ID')\n    tg_username = models.CharField('Имя пользователя',null=True, max_length=300, blank=True)\n    name = models.CharField('Имя', max_length=300,null=True, blank=True)\n    photo = models.ImageField('Аватарка пользователя',null=True, upload_to='static/media/users/')\n    lang = models.ForeignKey(Language, on_delete=models.SET_NULL, null=True)\n    country = models.ForeignKey(Country, on_delete=models.SET_NULL, null=True)\n    isActive = models.BooleanField('Активен', default=False)\n    paid = models.BooleanField('Имел/Имеет платную подписку', default=False)\n    search_history = models.JSONField(default=list, verbose_name='История поиска')",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Admins",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Admins(models.Model):\n    tg_id = models.BigIntegerField('Админы')\n    list_per_page = 500\n    def __str__(self):\n        return f'{self.tg_id}'\n    class Meta:\n        verbose_name = 'Админ'\n        verbose_name_plural = 'Админы'\nclass Genre(models.Model):\n    genre = models.CharField('Имя жанра на анг.', null=True, max_length=500, blank=True)",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Genre",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Genre(models.Model):\n    genre = models.CharField('Имя жанра на анг.', null=True, max_length=500, blank=True)\n    list_per_page = 500\n    def __str__(self):\n        return str(self.genre)\n    class Meta:\n        verbose_name = 'Жанр'\n        verbose_name_plural = 'Жанры'\nclass Serail(models.Model):\n    name = models.CharField('Имя', max_length=500, null=True, blank=True)",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Serail",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Serail(models.Model):\n    name = models.CharField('Имя', max_length=500, null=True, blank=True)\n    lang = models.ForeignKey(Language, on_delete=models.CASCADE, null=True)\n    vertical_photo = models.ImageField('Вертикальная обложка', null=True, upload_to='static/media/serail/',  blank=True)\n    horizontal_photo0 = models.ImageField('Горизонтальная обложка',null=True, upload_to='static/media/serail/', blank=True)\n    horizontal_photo1 = models.ImageField('Горизонтальная обложка 2', null=True, upload_to='static/media/serail/', blank=True)\n    horizontal_photo2 = models.ImageField('Горизонтальная обложка 3', null=True, upload_to='static/media/serail/', blank=True)\n    horizontal_photo3 = models.ImageField('Горизонтальная обложка 4', null=True, upload_to='static/media/serail/', blank=True)\n    horizontal_photo4 = models.ImageField('Горизонтальная обложка 5', null=True, upload_to='static/media/serail/', blank=True)\n    horizontal_photo5 = models.ImageField('Горизонтальная обложка 6', null=True, upload_to='static/media/serail/', blank=True)",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "StatusNew",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class StatusNew(models.Model):\n    serail = models.ForeignKey(Serail, on_delete=models.SET_NULL, null=True, related_name='statusnew')\n    added_date = models.DateField('Дата добавления статуса', auto_now_add=True)\n    list_per_page = 500\n    def __str__(self):\n        return f'{self.serail.name}'\n    class Meta:\n        verbose_name = 'Имеет статус \\\"новый\\\"'\n        verbose_name_plural = 'Имеют статус \\\"новый\\\"'\nclass Comments(models.Model):",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Comments",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Comments(models.Model):\n    serail = models.ForeignKey(Serail, on_delete=models.CASCADE, null=True, related_name='comments')\n    text = models.TextField('Текст комментария', null=True, blank=True)\n    user = models.ForeignKey(Users, on_delete=models.CASCADE)\n    list_per_page = 500\n    def __str__(self):\n        comment_excerpt = (self.text[:16] + '...') if self.text else '...'\n        return f'{self.user.name}: {comment_excerpt}'\n    class Meta:\n        verbose_name = 'Комментарий'",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "History",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class History(models.Model):\n    serail = models.ForeignKey(Serail, on_delete=models.SET_NULL, null=True)\n    user = models.ForeignKey(Users, on_delete=models.CASCADE)\n    def __str__(self):\n        return f'{self.user.name}/{self.user.tg_username} - {self.serail.name}'\n    class Meta:\n        verbose_name = 'История просмотра'\n        verbose_name_plural = 'Истории просмотра'\nclass Series(models.Model):\n    serail = models.ForeignKey(Serail, on_delete=models.CASCADE, null=True)",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Series",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Series(models.Model):\n    serail = models.ForeignKey(Serail, on_delete=models.CASCADE, null=True)\n    episode = models.BigIntegerField('Номер эпизода', null=False)\n    name = models.CharField('Имя серии', max_length=500, null=False)\n    likes = models.BigIntegerField('Лайки', default=0, )\n    video = models.FileField(upload_to='series/', storage=VideoStorage())\n    list_per_page = 500\n    def __str__(self):\n        return f'{self.serail.name}/{self.name} - {self.episode} эпизод'\n    class Meta:",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "PermissionsModel",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class PermissionsModel(models.Model):\n    series = models.ForeignKey(Series, on_delete=models.CASCADE, null=True)\n    user = models.ForeignKey(Users, on_delete=models.CASCADE)\n    list_per_page = 500\n    def __str__(self):\n        return f'{self.serail.name} - {self.user.username}'\n    class Meta:\n        verbose_name = 'Доступ'\n        verbose_name_plural = 'Доступы'\nclass Payments(models.Model):",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Payments",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Payments(models.Model):\n    user = models.ForeignKey(Users, on_delete=models.SET_NULL, null=True)\n    summa = models.BigIntegerField('Сумма оплаты', default=0, null=True)\n    list_per_page = 500\n    def __str__(self):\n        return f'{self.user.name} - {self.summa} USD/USDT'\n    class Meta:\n        verbose_name = 'Транзакция'\n        verbose_name_plural = 'Транзакции'\nclass ViewedSeries(models.Model):",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "ViewedSeries",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class ViewedSeries(models.Model):\n    user = models.ForeignKey(Users, on_delete=models.CASCADE)\n    series = models.ForeignKey(Series, on_delete=models.CASCADE)\n    viewed_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        unique_together = ('user', 'series') \nclass DocsTexts(models.Model):\n    class StatusEnum(models.TextChoices):\n        TERMS_OF_USE = 'TERMS_OF_USE', _('TERMS_OF_USE')\n        PRIVACY_POLICY = 'PRIVACY_POLICY', _('PRIVACY_POLICY')",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "DocsTexts",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class DocsTexts(models.Model):\n    class StatusEnum(models.TextChoices):\n        TERMS_OF_USE = 'TERMS_OF_USE', _('TERMS_OF_USE')\n        PRIVACY_POLICY = 'PRIVACY_POLICY', _('PRIVACY_POLICY')\n        DMCA = 'DMCA', _('DMCA')\n    name = models.CharField('Имя', choices=StatusEnum.choices, max_length=250)\n    lang = models.ForeignKey(Language, on_delete=models.CASCADE, null=True)\n    text = models.TextField('Текст документа', null=True, blank=True)\n    list_per_page = 500\n    def __str__(self):",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Favorite(models.Model):\n    serail = models.ForeignKey(Serail, on_delete=models.SET_NULL, null=True)\n    user = models.ForeignKey(Users, on_delete=models.CASCADE)\n    def __str__(self):\n        return f'{self.serail.name} - {self.user.tg_username}'\n    class Meta:\n        verbose_name = 'Избранное'\n        verbose_name_plural = 'Избранные'",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "LanguageSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class LanguageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Language\n        fields = '__all__'\nclass CountrySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Country\n        fields = '__all__'\nclass UsersSerializer(serializers.ModelSerializer):\n    lang = LanguageSerializer(read_only=True) ",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "CountrySerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class CountrySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Country\n        fields = '__all__'\nclass UsersSerializer(serializers.ModelSerializer):\n    lang = LanguageSerializer(read_only=True) \n    country = CountrySerializer(read_only=True)\n    class Meta:\n        model = Users\n        fields = ['tg_id', 'tg_username', 'name', 'photo', 'lang', 'country', 'isActive', 'paid', 'search_history']",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "UsersSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class UsersSerializer(serializers.ModelSerializer):\n    lang = LanguageSerializer(read_only=True) \n    country = CountrySerializer(read_only=True)\n    class Meta:\n        model = Users\n        fields = ['tg_id', 'tg_username', 'name', 'photo', 'lang', 'country', 'isActive', 'paid', 'search_history']\nclass AdminsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Admins\n        fields = '__all__'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "AdminsSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class AdminsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Admins\n        fields = '__all__'\nclass GenreSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Genre\n        fields = '__all__'\nclass SerailSerializer(serializers.ModelSerializer):\n    genre = serializers.StringRelatedField()",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "GenreSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class GenreSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Genre\n        fields = '__all__'\nclass SerailSerializer(serializers.ModelSerializer):\n    genre = serializers.StringRelatedField()\n    class Meta:\n        model = Serail\n        fields = ['id', 'name', 'vertical_photo', 'genre', 'rating', 'description']\nclass StatusNewSerializer(serializers.ModelSerializer):",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "SerailSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class SerailSerializer(serializers.ModelSerializer):\n    genre = serializers.StringRelatedField()\n    class Meta:\n        model = Serail\n        fields = ['id', 'name', 'vertical_photo', 'genre', 'rating', 'description']\nclass StatusNewSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = StatusNew\n        fields = '__all__'\nclass CommentsSerializer(serializers.ModelSerializer):",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "StatusNewSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class StatusNewSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = StatusNew\n        fields = '__all__'\nclass CommentsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Comments\n        fields = '__all__'\nclass HistorySerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "CommentsSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class CommentsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Comments\n        fields = '__all__'\nclass HistorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = History\n        fields = '__all__'\nclass SeriesSerializer(serializers.ModelSerializer):\n    serail_name = serializers.CharField(source='serail.name', read_only=True)",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "HistorySerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class HistorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = History\n        fields = '__all__'\nclass SeriesSerializer(serializers.ModelSerializer):\n    serail_name = serializers.CharField(source='serail.name', read_only=True)\n    class Meta:\n        model = Series\n        fields = ['id', 'serail_name', 'episode', 'name', 'likes', 'video']\nclass DocsTextsSerializer(serializers.ModelSerializer):",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "SeriesSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class SeriesSerializer(serializers.ModelSerializer):\n    serail_name = serializers.CharField(source='serail.name', read_only=True)\n    class Meta:\n        model = Series\n        fields = ['id', 'serail_name', 'episode', 'name', 'likes', 'video']\nclass DocsTextsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DocsTexts\n        fields = '__all__'\nclass PaymentsSerializer(serializers.ModelSerializer):",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "DocsTextsSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class DocsTextsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DocsTexts\n        fields = '__all__'\nclass PaymentsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Payments\n        fields = '__all__'\nclass FavoriteSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentsSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class PaymentsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Payments\n        fields = '__all__'\nclass FavoriteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Favorite\n        fields = '__all__'\nclass RatingUpdateSerializer(serializers.Serializer):\n    rating = serializers.IntegerField(min_value=1, max_value=5)",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "FavoriteSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class FavoriteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Favorite\n        fields = '__all__'\nclass RatingUpdateSerializer(serializers.Serializer):\n    rating = serializers.IntegerField(min_value=1, max_value=5)\n    serail_id = serializers.IntegerField()",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "RatingUpdateSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class RatingUpdateSerializer(serializers.Serializer):\n    rating = serializers.IntegerField(min_value=1, max_value=5)\n    serail_id = serializers.IntegerField()",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "VideoStorage",
        "kind": 6,
        "importPath": "api.storage_backends",
        "description": "api.storage_backends",
        "peekOfCode": "class VideoStorage(S3Boto3Storage):\n    location = 'videos'\n    file_overwrite = False  \nclass PhotoStorage(FileSystemStorage):\n    location = 'static/media/photos'",
        "detail": "api.storage_backends",
        "documentation": {}
    },
    {
        "label": "PhotoStorage",
        "kind": 6,
        "importPath": "api.storage_backends",
        "description": "api.storage_backends",
        "peekOfCode": "class PhotoStorage(FileSystemStorage):\n    location = 'static/media/photos'",
        "detail": "api.storage_backends",
        "documentation": {}
    },
    {
        "label": "check_status_new",
        "kind": 2,
        "importPath": "api.tasks",
        "description": "api.tasks",
        "peekOfCode": "def check_status_new():\n    now = timezone.now()\n    week_ago = now - timedelta(weeks=1)\n    old_status_new_records = StatusNew.objects.filter(added_date__lt=week_ago)\n    deleted_count, _ = old_status_new_records.delete()\ndef run_reminder_scheduler():\n    while True:\n        now = timezone.localtime(timezone.now())\n        if now.hour == 0 and now.minute == 0:\n            check_status_new()",
        "detail": "api.tasks",
        "documentation": {}
    },
    {
        "label": "run_reminder_scheduler",
        "kind": 2,
        "importPath": "api.tasks",
        "description": "api.tasks",
        "peekOfCode": "def run_reminder_scheduler():\n    while True:\n        now = timezone.localtime(timezone.now())\n        if now.hour == 0 and now.minute == 0:\n            check_status_new()\n        time.sleep(60)  \ndef start_scheduler():\n    thread = threading.Thread(target=run_reminder_scheduler, daemon=True)\n    thread.start()",
        "detail": "api.tasks",
        "documentation": {}
    },
    {
        "label": "start_scheduler",
        "kind": 2,
        "importPath": "api.tasks",
        "description": "api.tasks",
        "peekOfCode": "def start_scheduler():\n    thread = threading.Thread(target=run_reminder_scheduler, daemon=True)\n    thread.start()",
        "detail": "api.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('users', UsersViewSet)\nrouter.register('language', LanguageViewSet)\nrouter.register('country', CountryViewSet)\nrouter.register('genre', GenreViewSet)\nrouter.register('admins', AdminsViewSet)\nrouter.register('serail', SerailViewSet)\nrouter.register('series', SeriesViewSet)\nrouter.register('status-new', StatusNewViewSet)\nrouter.register('comments', CommentsViewSet)",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "export_users_to_xlsx",
        "kind": 2,
        "importPath": "api.utils",
        "description": "api.utils",
        "peekOfCode": "def export_users_to_xlsx(filename):\n    workbook = openpyxl.Workbook()\n    sheet = workbook.active\n    sheet.title = 'Users'\n    sheet.append(['Telegram ID', 'Имя пользователя', 'Имя'])\n    users = User.objects.all()\n    for user in users:\n        sheet.append([user.tg_id, user.tg_username, user.name])\n    workbook.save(filename)",
        "detail": "api.utils",
        "documentation": {}
    },
    {
        "label": "UsersViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class UsersViewSet(viewsets.ModelViewSet): \n    queryset = Users.objects.all()\n    serializer_class = UsersSerializer\n    def get_queryset(self):\n        tg_id = self.request.tg_user_data['tg_id']\n        if tg_id:\n            return Users.objects.filter(tg_id=tg_id)\n        else:\n            return Users.objects.none()\n    def list(self, request, *args, **kwargs):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "CountryViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class CountryViewSet(viewsets.ModelViewSet):\n    queryset = Country.objects.all()\n    serializer_class = CountrySerializer\nclass LanguageViewSet(viewsets.ModelViewSet):\n    queryset = Language.objects.all()\n    serializer_class = LanguageSerializer\nclass GenreViewSet(viewsets.ModelViewSet):\n    queryset = Genre.objects.all()\n    serializer_class = GenreSerializer\nclass AdminsViewSet(viewsets.ModelViewSet):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "LanguageViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class LanguageViewSet(viewsets.ModelViewSet):\n    queryset = Language.objects.all()\n    serializer_class = LanguageSerializer\nclass GenreViewSet(viewsets.ModelViewSet):\n    queryset = Genre.objects.all()\n    serializer_class = GenreSerializer\nclass AdminsViewSet(viewsets.ModelViewSet):\n    queryset = Admins.objects.all()\n    serializer_class = AdminsSerializer\nclass SerailViewSet(viewsets.ModelViewSet):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "GenreViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class GenreViewSet(viewsets.ModelViewSet):\n    queryset = Genre.objects.all()\n    serializer_class = GenreSerializer\nclass AdminsViewSet(viewsets.ModelViewSet):\n    queryset = Admins.objects.all()\n    serializer_class = AdminsSerializer\nclass SerailViewSet(viewsets.ModelViewSet):\n    queryset = Serail.objects.all()\n    serializer_class = SerailSerializer\n    def get_user_language(self):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "AdminsViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class AdminsViewSet(viewsets.ModelViewSet):\n    queryset = Admins.objects.all()\n    serializer_class = AdminsSerializer\nclass SerailViewSet(viewsets.ModelViewSet):\n    queryset = Serail.objects.all()\n    serializer_class = SerailSerializer\n    def get_user_language(self):\n        tg_id = int(self.request.tg_user_data.get('tg_id', 0))\n        user = Users.objects.filter(tg_id=tg_id).first()\n        if user and user.lang:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "SerailViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class SerailViewSet(viewsets.ModelViewSet):\n    queryset = Serail.objects.all()\n    serializer_class = SerailSerializer\n    def get_user_language(self):\n        tg_id = int(self.request.tg_user_data.get('tg_id', 0))\n        user = Users.objects.filter(tg_id=tg_id).first()\n        if user and user.lang:\n            return str(user.lang.lang_name)\n        return 'en'\n    def translate_it(self, text, target_lang):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "StatusNewViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class StatusNewViewSet(viewsets.ModelViewSet):\n    queryset = StatusNew.objects.all()\n    serializer_class = StatusNewSerializer\nclass CommentsViewSet(viewsets.ModelViewSet):\n    queryset = Comments.objects.all()\n    serializer_class = CommentsSerializer\n    def get_queryset(self):\n        tg_id = self.request.tg_user_data['tg_id']\n        if tg_id:\n            return Users.objects.filter(tg_id=tg_id)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "CommentsViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class CommentsViewSet(viewsets.ModelViewSet):\n    queryset = Comments.objects.all()\n    serializer_class = CommentsSerializer\n    def get_queryset(self):\n        tg_id = self.request.tg_user_data['tg_id']\n        if tg_id:\n            return Users.objects.filter(tg_id=tg_id)\n        else:\n            return Users.objects.none()\n    @action(detail=False, methods=['post'])",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "HistoryViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class HistoryViewSet(viewsets.ModelViewSet):\n    queryset = History.objects.all()\n    serializer_class = HistorySerializer\nclass SeriesViewSet(viewsets.ModelViewSet):\n    queryset = Series.objects.all()\n    serializer_class = SeriesSerializer\n    def get_queryset(self):\n        tg_id = getattr(self.request, 'tg_id', None)\n        if tg_id:\n            return Users.objects.filter(tg_id=tg_id)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "SeriesViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class SeriesViewSet(viewsets.ModelViewSet):\n    queryset = Series.objects.all()\n    serializer_class = SeriesSerializer\n    def get_queryset(self):\n        tg_id = getattr(self.request, 'tg_id', None)\n        if tg_id:\n            return Users.objects.filter(tg_id=tg_id)\n        else:\n            return Users.objects.none()\n    @action(detail=False, methods=['get'])",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "DocsTextsViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class DocsTextsViewSet(viewsets.ModelViewSet):\n    queryset = DocsTexts.objects.all()\n    serializer_class = DocsTextsSerializer\n    def get_user_language(self):\n        tg_id = int(self.request.tg_user_data.get('tg_id', 0))\n        user = Users.objects.filter(tg_id=tg_id).first()\n        if user and user.lang:\n            return str(user.lang.lang_name)\n        return 'en'\n    def translate_it(self, text, target_lang):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "PaymentsViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class PaymentsViewSet(viewsets.ModelViewSet):\n    queryset = Payments.objects.all()\n    serializer_class = PaymentsSerializer\n    @action(detail=False, methods=['get'])\n    def get_payment(self, request):\n        try:\n            # Данные для запроса к YooKassa API\n            headers = {\n                'Authorization': 'Basic qtHat2h6NW4V2Y3lsRmfFBtapATvT7Vf6s',\n                'Content-Type': 'application/json',",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "FavoriteViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class FavoriteViewSet(viewsets.ModelViewSet):\n    queryset = Favorite.objects.all()\n    serializer_class = FavoriteSerializer\n    @action(detail=False, methods=['get'])\n    def get_my_list(self, request):\n        tg_id = int(self.request.tg_user_data.get('tg_id', 0))\n        if not tg_id:\n            return Response({\"detail\": \"User not found.\"}, status=404)\n        user = Users.objects.filter(tg_id=tg_id).first()\n        if not user:",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.asgi",
        "description": "backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.asgi",
        "documentation": {}
    },
    {
        "label": "TelegramDataMiddleware",
        "kind": 6,
        "importPath": "backend.middleware",
        "description": "backend.middleware",
        "peekOfCode": "class TelegramDataMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n        self.auth_handler = WebAppAuth('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I')  # Создаем экземпляр WebAppAuth\n    def __call__(self, request):\n        # Получаем initData из заголовков\n        init_data = request.headers.get('InitData')\n        if init_data:\n            try:\n                # Используем метод get_user_data для получения данных о пользователе",
        "detail": "backend.middleware",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')\nAWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME') # ваше имя бакета\nAWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')  # ваш регион\n# Настройка хранилища\nDEFAULT_FILE_STORAGE = 'storages.backends.s3.S3Boto3'\nAWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL') # ваш URL\n# Дополнительные параметры, если нужно\nAWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN') \"\"\"\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME') # ваше имя бакета\nAWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')  # ваш регион\n# Настройка хранилища\nDEFAULT_FILE_STORAGE = 'storages.backends.s3.S3Boto3'\nAWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL') # ваш URL\n# Дополнительные параметры, если нужно\nAWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN') \"\"\"\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_REGION_NAME",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')  # ваш регион\n# Настройка хранилища\nDEFAULT_FILE_STORAGE = 'storages.backends.s3.S3Boto3'\nAWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL') # ваш URL\n# Дополнительные параметры, если нужно\nAWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN') \"\"\"\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEFAULT_FILE_STORAGE = 'storages.backends.s3.S3Boto3'\nAWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL') # ваш URL\n# Дополнительные параметры, если нужно\nAWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN') \"\"\"\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_ENDPOINT_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL') # ваш URL\n# Дополнительные параметры, если нужно\nAWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN') \"\"\"\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')\nSECRET_KEY = 'zxcsadfdfadfl3mr2340ijd'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_CUSTOM_DOMAIN",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN') \"\"\"\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')\nSECRET_KEY = 'zxcsadfdfadfl3mr2340ijd'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')\nSECRET_KEY = 'zxcsadfdfadfl3mr2340ijd'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = ['https://skybox.video']",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')\nSECRET_KEY = 'zxcsadfdfadfl3mr2340ijd'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = ['https://skybox.video']\nBOT_TOKEN = '8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I'\n# Application definition\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SECRET_KEY = 'zxcsadfdfadfl3mr2340ijd'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = ['https://skybox.video']\nBOT_TOKEN = '8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I'\n# Application definition\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_METHODS = (",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = ['https://skybox.video']\nBOT_TOKEN = '8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I'\n# Application definition\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = ['https://skybox.video']\nBOT_TOKEN = '8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I'\n# Application definition\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = ['https://skybox.video']\nBOT_TOKEN = '8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I'\n# Application definition\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "BOT_TOKEN",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "BOT_TOKEN = '8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I'\n# Application definition\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n)",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n)\nCORS_ALLOW_HEADERS = ('content-disposition', 'accept-encoding',",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n)\nCORS_ALLOW_HEADERS = ('content-disposition', 'accept-encoding',\n                      'content-type', 'accept', 'origin', 'Authorization',",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = ('content-disposition', 'accept-encoding',\n                      'content-type', 'accept', 'origin', 'Authorization',\n                      'access-control-allow-methods', 'initData')\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'api',\n    'rest_framework',\n    'corsheaders',",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n   'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header'\n        }\n    }\n}\nMIDDLEWARE = [",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'backend.middleware.TelegramDataMiddleware'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ROOT_URLCONF = 'backend.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'backend.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('POSTGRES_DB'),\n        'USER': os.environ.get('POSTGRES_USER'),\n        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),\n        'HOST': 'postgresql',\n        'PORT': 5432,\n    }",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('POSTGRES_DB'),\n        'USER': os.environ.get('POSTGRES_USER'),\n        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),\n        'HOST': 'postgresql',\n        'PORT': 5432,\n    }\n} ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "LANGUAGE_CODE = 'ru'\nTIME_ZONE = 'Europe/Moscow'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/api/staticfiles/'\nSTATIC_ROOT = '/app/staticfiles/'\nMEDIA_URL = '/api/static/media/'\nMEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TIME_ZONE = 'Europe/Moscow'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/api/staticfiles/'\nSTATIC_ROOT = '/app/staticfiles/'\nMEDIA_URL = '/api/static/media/'\nMEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/api/staticfiles/'\nSTATIC_ROOT = '/app/staticfiles/'\nMEDIA_URL = '/api/static/media/'\nMEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = '/api/staticfiles/'\nSTATIC_ROOT = '/app/staticfiles/'\nMEDIA_URL = '/api/static/media/'\nMEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "STATIC_URL = '/api/staticfiles/'\nSTATIC_ROOT = '/app/staticfiles/'\nMEDIA_URL = '/api/static/media/'\nMEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "STATIC_ROOT = '/app/staticfiles/'\nMEDIA_URL = '/api/static/media/'\nMEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MEDIA_URL = '/api/static/media/'\nMEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MEDIA_ROOT = '/app/staticfiles/media/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_ACCESS_KEY_ID = 'NH9Q3XYBHSIYLCBX1VAV'\nAWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = 'mDvlC5tUkiD9Lrr04a38phKl52SBgRgDd1E5ACg3'\nAWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_STORAGE_BUCKET_NAME = 'db3c5564-9df7e9c8-879a-46bd-ba04-f363ec17e9d0'\nAWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_ENDPOINT_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_S3_ENDPOINT_URL = 'https://s3.timeweb.cloud'  \nAWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_REGION_NAME",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_S3_REGION_NAME = 'ru-1'  \nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_CUSTOM_DOMAIN",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.timeweb.cloud'\nDEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEFAULT_FILE_STORAGE = 'api.storage_backends.VideoStorage'",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "backend.urls",
        "description": "backend.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"SWYDK API\",\n        default_version='v1.1.3',\n        description=\"API Service created by Sanzhar Kasymzhomart\",\n        contact=openapi.Contact(email=\"sanzhar.kaymzhomart@gmail.com\"),\n        license=openapi.License(name=\"SWYDK GROUP LICENSE\"),\n    ),\n    public=True,\n    permission_classes=(permissions.AllowAny,),",
        "detail": "backend.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "backend.urls",
        "description": "backend.urls",
        "peekOfCode": "admin.site.site_header = 'Панель управления SKYBOX'\nurlpatterns = [\n    path('api/admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n    path('api/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('api/docs/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "backend.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.urls",
        "description": "backend.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n    path('api/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('api/docs/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "backend.urls",
        "documentation": {}
    },
    {
        "label": "AuthError",
        "kind": 6,
        "importPath": "backend.webapp_auth",
        "description": "backend.webapp_auth",
        "peekOfCode": "class AuthError(Exception):\n    status: int = 403\n    detail: str = \"unknown auth error\"\n    @property\n    def message(self) -> str:\n        return f\"Auth error occurred, detail: {self.detail}\"\nclass WebAppAuth:\n    def __init__(self, bot_token: str) -> None:\n        self._bot_token = bot_token\n        self._secret_key = self._get_secret_key()",
        "detail": "backend.webapp_auth",
        "documentation": {}
    },
    {
        "label": "WebAppAuth",
        "kind": 6,
        "importPath": "backend.webapp_auth",
        "description": "backend.webapp_auth",
        "peekOfCode": "class WebAppAuth:\n    def __init__(self, bot_token: str) -> None:\n        self._bot_token = bot_token\n        self._secret_key = self._get_secret_key()\n    def get_user_id(self, init_data: str) -> int:\n        return int(json.loads(self._validate(init_data)[\"user\"])[\"id\"])\n    def get_user_data(self, init_data: str) -> dict:\n        validated_data = self._validate(init_data)\n        user_data = json.loads(validated_data[\"user\"])\n        return {",
        "detail": "backend.webapp_auth",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.wsgi",
        "description": "backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0001_initial",
        "description": "main.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Admins',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('tg_id', models.BigIntegerField(verbose_name='Админы')),",
        "detail": "main.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0002_orders_time_date",
        "description": "main.migrations.0002_orders_time_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='orders',\n            name='time_date',\n            field=models.CharField(default='Самовывоз', max_length=300, verbose_name='Время доставки'),\n        ),",
        "detail": "main.migrations.0002_orders_time_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0003_orders_paid",
        "description": "main.migrations.0003_orders_paid",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0002_orders_time_date'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='orders',\n            name='paid',\n            field=models.BooleanField(default=False, verbose_name='Оплачен'),\n        ),",
        "detail": "main.migrations.0003_orders_paid",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0004_remove_orders_delivered_remove_orders_delivereddone",
        "description": "main.migrations.0004_remove_orders_delivered_remove_orders_delivereddone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0003_orders_paid'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='orders',\n            name='delivered',\n        ),\n        migrations.RemoveField(",
        "detail": "main.migrations.0004_remove_orders_delivered_remove_orders_delivereddone",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0005_position_cooked",
        "description": "main.migrations.0005_position_cooked",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('main', '0004_remove_orders_delivered_remove_orders_delivereddone'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='position',\n            name='cooked',\n            field=models.BooleanField(default=False, verbose_name='Говто'),\n        ),",
        "detail": "main.migrations.0005_position_cooked",
        "documentation": {}
    },
    {
        "label": "admin_private",
        "kind": 5,
        "importPath": "main.tg_bot.admin_private",
        "description": "main.tg_bot.admin_private",
        "peekOfCode": "admin_private = Router()\n@admin_private.message(Command('admin'))\nasync def admin_panel(message: Message):\n    ch = await check_admin(message.from_user.id)\n    if ch:\n        await message.answer('🔒 Админ-панель', reply_markup=kb.admin_panel())\n    else:\n        await message.answer('У вас нет доступа')\n@admin_private.callback_query(F.data == 'statistics')\nasync def statistics(callback: CallbackQuery):",
        "detail": "main.tg_bot.admin_private",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "main.tg_bot.classes_functions",
        "description": "main.tg_bot.classes_functions",
        "peekOfCode": "class Admin(StatesGroup):\n    mailing_state = State()\n    mailing_text = State()\n    mailing_text_only = State()\n    ask = State()\n    confirm_yes = State()\n    confirm_no = State()\n    position_name = State()\n    position_photo = State()\n    description = State()",
        "detail": "main.tg_bot.classes_functions",
        "documentation": {}
    },
    {
        "label": "do_paid",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def do_paid(order_id):\n    order = Orders.objects.get(id=order_id)\n    order.paid = True\n    order.save()\n    return True\n@sync_to_async\ndef get_order_by_id():\n    return list(Orders.objects.order_by('-id').values('id')[:1])\n@sync_to_async\ndef n_cooks(order_id):",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_order_by_id",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_order_by_id():\n    return list(Orders.objects.order_by('-id').values('id')[:1])\n@sync_to_async\ndef n_cooks(order_id):\n    order = Orders.objects.get(id=order_id)\n    order.notify_cooks = True\n    order.save()\n    return True\n@sync_to_async\ndef n_pickers(order_id):",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "n_cooks",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def n_cooks(order_id):\n    order = Orders.objects.get(id=order_id)\n    order.notify_cooks = True\n    order.save()\n    return True\n@sync_to_async\ndef n_pickers(order_id):\n    order = Orders.objects.get(id=order_id)\n    old_delivered = order.deliveredSucces\n    order.notify_pickers = True",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "n_pickers",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def n_pickers(order_id):\n    order = Orders.objects.get(id=order_id)\n    old_delivered = order.deliveredSucces\n    order.notify_pickers = True\n    order.save()\n    return True\n@sync_to_async\ndef d_success(order_id):\n    order = Orders.objects.get(id=order_id)\n    old_delivered = order.deliveredSucces",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "d_success",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def d_success(order_id):\n    order = Orders.objects.get(id=order_id)\n    old_delivered = order.deliveredSucces\n    order.deliveredSucces = True\n    order.delivered_notifyed_user = True\n    order.paid = True\n    order.save()\n    # Логика после обновления заказа\n    if old_delivered != order.deliveredSucces and order.deliveredSucces:\n        Order_list.objects.create(",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "add_order",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def add_order(tg_id, withOrder):\n    Order_list.objects.create(tg_id=tg_id, withOrder=withOrder)\n    return True\n@sync_to_async\ndef get_all_orders():\n    return list(Order_list.objects.all().values('tg_id', 'withOrder'))\n@sync_to_async\ndef delete_orders(tg_ids):\n    # Удаляем записи с указанными tg_id\n    Order_list.objects.filter(tg_id__in=tg_ids).delete()",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_all_orders",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_all_orders():\n    return list(Order_list.objects.all().values('tg_id', 'withOrder'))\n@sync_to_async\ndef delete_orders(tg_ids):\n    # Удаляем записи с указанными tg_id\n    Order_list.objects.filter(tg_id__in=tg_ids).delete()\n# Users\n@sync_to_async\ndef get_users():\n    queryset = User.objects.all().values('tg_id')",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "delete_orders",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def delete_orders(tg_ids):\n    # Удаляем записи с указанными tg_id\n    Order_list.objects.filter(tg_id__in=tg_ids).delete()\n# Users\n@sync_to_async\ndef get_users():\n    queryset = User.objects.all().values('tg_id')\n    return len(list(queryset))\n@sync_to_async\ndef get_users_status():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_users():\n    queryset = User.objects.all().values('tg_id')\n    return len(list(queryset))\n@sync_to_async\ndef get_users_status():\n    return User.objects.filter(isActive=True).count()\n@sync_to_async\ndef get_users_status2():\n    return User.objects.filter(isActive=False).count()\n@sync_to_async",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users_status",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_users_status():\n    return User.objects.filter(isActive=True).count()\n@sync_to_async\ndef get_users_status2():\n    return User.objects.filter(isActive=False).count()\n@sync_to_async\ndef add_phone_number(user_id, phone_number):\n    user = User.objects.get(tg_id=user_id)\n    user.phone_number = phone_number\n    user.save()",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users_status2",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_users_status2():\n    return User.objects.filter(isActive=False).count()\n@sync_to_async\ndef add_phone_number(user_id, phone_number):\n    user = User.objects.get(tg_id=user_id)\n    user.phone_number = phone_number\n    user.save()\n    return True\n@sync_to_async\ndef add_user(user_id):",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "add_phone_number",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def add_phone_number(user_id, phone_number):\n    user = User.objects.get(tg_id=user_id)\n    user.phone_number = phone_number\n    user.save()\n    return True\n@sync_to_async\ndef add_user(user_id):\n    if not User.objects.filter(tg_id=user_id).exists():\n        user = User(tg_id=user_id)\n        user.save()",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def add_user(user_id):\n    if not User.objects.filter(tg_id=user_id).exists():\n        user = User(tg_id=user_id)\n        user.save()\n    return True\n@sync_to_async\ndef get_users_post():\n    queryset = User.objects.all().values('tg_id')\n    return list(queryset)\n# Orders",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_users_post",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_users_post():\n    queryset = User.objects.all().values('tg_id')\n    return list(queryset)\n# Orders\n@sync_to_async\ndef fetch_orders(tg_id, start_idx, end_idx):\n    return list(Orders.objects.filter(user__tg_id=tg_id)[start_idx:end_idx])\n@sync_to_async\ndef count_orders(tg_id):\n    return Orders.objects.filter(user__tg_id=tg_id).count()",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "fetch_orders",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def fetch_orders(tg_id, start_idx, end_idx):\n    return list(Orders.objects.filter(user__tg_id=tg_id)[start_idx:end_idx])\n@sync_to_async\ndef count_orders(tg_id):\n    return Orders.objects.filter(user__tg_id=tg_id).count()\n@sync_to_async\ndef fetch_order_by_id(order_id):\n    return list(Orders.objects.filter(id=order_id).values('id', 'date', 'status', 'summa', 'user__tg_id', 'user__isActive', 'user__phone_number'))\n@sync_to_async\ndef get_pos(order_id):",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "count_orders",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def count_orders(tg_id):\n    return Orders.objects.filter(user__tg_id=tg_id).count()\n@sync_to_async\ndef fetch_order_by_id(order_id):\n    return list(Orders.objects.filter(id=order_id).values('id', 'date', 'status', 'summa', 'user__tg_id', 'user__isActive', 'user__phone_number'))\n@sync_to_async\ndef get_pos(order_id):\n    positions = []\n    for pos in  Orders.objects.get(id=order_id).position.all().values('id','name','price'):\n        positions.append(pos)",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "fetch_order_by_id",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def fetch_order_by_id(order_id):\n    return list(Orders.objects.filter(id=order_id).values('id', 'date', 'status', 'summa', 'user__tg_id', 'user__isActive', 'user__phone_number'))\n@sync_to_async\ndef get_pos(order_id):\n    positions = []\n    for pos in  Orders.objects.get(id=order_id).position.all().values('id','name','price'):\n        positions.append(pos)\n    return positions\n# admins\n@sync_to_async",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_pos",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_pos(order_id):\n    positions = []\n    for pos in  Orders.objects.get(id=order_id).position.all().values('id','name','price'):\n        positions.append(pos)\n    return positions\n# admins\n@sync_to_async\ndef check_admin(user_id):\n    if not Admins.objects.filter(tg_id=user_id).exists():\n        return False",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "check_admin",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def check_admin(user_id):\n    if not Admins.objects.filter(tg_id=user_id).exists():\n        return False\n    return True\n# Orders\nfrom datetime import datetime, timedelta\nfrom django.utils import timezone\n@sync_to_async\ndef get_total_orders_count():\n    return Orders.objects.count()",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_total_orders_count",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_total_orders_count():\n    return Orders.objects.count()\n@sync_to_async\ndef get_today_orders_count():\n    today = timezone.now().date()\n    return Orders.objects.filter(date__date=today).count()\n@sync_to_async\ndef get_week_orders_count():\n    today = timezone.now().date()\n    week_start = today - timedelta(days=today.weekday())",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_today_orders_count",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_today_orders_count():\n    today = timezone.now().date()\n    return Orders.objects.filter(date__date=today).count()\n@sync_to_async\ndef get_week_orders_count():\n    today = timezone.now().date()\n    week_start = today - timedelta(days=today.weekday())\n    return Orders.objects.filter(date__date__gte=week_start, date__date__lte=today).count()\n@sync_to_async\ndef get_month_orders_count():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_week_orders_count",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_week_orders_count():\n    today = timezone.now().date()\n    week_start = today - timedelta(days=today.weekday())\n    return Orders.objects.filter(date__date__gte=week_start, date__date__lte=today).count()\n@sync_to_async\ndef get_month_orders_count():\n    today = timezone.now().date()\n    month_start = today.replace(day=1)\n    return Orders.objects.filter(date__date__gte=month_start, date__date__lte=today).count()\n# Admin menu",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_month_orders_count",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_month_orders_count():\n    today = timezone.now().date()\n    month_start = today.replace(day=1)\n    return Orders.objects.filter(date__date__gte=month_start, date__date__lte=today).count()\n# Admin menu\n@sync_to_async\ndef get_categories():\n    queryset = Category.objects.all().values('name')\n    return list(queryset)\n@sync_to_async",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_categories():\n    queryset = Category.objects.all().values('name')\n    return list(queryset)\n@sync_to_async\ndef get_menus(ftype):\n    queryset = Menu.objects.filter(category__name=ftype).all().values('id','name','price','weight','energy_valuable','category__name')\n    return list(queryset)\n@sync_to_async\ndef delete_menu_item(menu_id):\n    Menu.objects.filter(id=menu_id).delete()",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "get_menus",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def get_menus(ftype):\n    queryset = Menu.objects.filter(category__name=ftype).all().values('id','name','price','weight','energy_valuable','category__name')\n    return list(queryset)\n@sync_to_async\ndef delete_menu_item(menu_id):\n    Menu.objects.filter(id=menu_id).delete()\n# notify orders\n@sync_to_async\ndef notify_cooks(order_id):\n    if Orders.objects.filter(notify_cooksDone=False,id=order_id).exists():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "delete_menu_item",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def delete_menu_item(menu_id):\n    Menu.objects.filter(id=menu_id).delete()\n# notify orders\n@sync_to_async\ndef notify_cooks(order_id):\n    if Orders.objects.filter(notify_cooksDone=False,id=order_id).exists():\n        order = Orders(id=order_id)\n        notify_cooks = True\n        user.save()\n        return True",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "notify_cooks",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def notify_cooks(order_id):\n    if Orders.objects.filter(notify_cooksDone=False,id=order_id).exists():\n        order = Orders(id=order_id)\n        notify_cooks = True\n        user.save()\n        return True\n    return False\n@sync_to_async\ndef notify_pickers(order_id):\n    if Orders.objects.filter(notify_pickersDone=False,id=order_id).exists():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "notify_pickers",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def notify_pickers(order_id):\n    if Orders.objects.filter(notify_pickersDone=False,id=order_id).exists():\n        order = Orders(id=order_id)\n        notify_pickers = True\n        user.save()\n        return True\n    return False\n@sync_to_async\ndef delivered(order_id):\n    if Orders.objects.filter(deliveredDone=False,id=order_id).exists():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "delivered",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def delivered(order_id):\n    if Orders.objects.filter(deliveredDone=False,id=order_id).exists():\n        order = Orders(id=order_id)\n        delivered = True\n        user.save()\n        return True\n    return False\n@sync_to_async\ndef isCooked(order_id):\n    if Orders.objects.filter(notify_cooksDone=True,id=order_id).exists() and Orders.objects.filter(notify_cooks=True,id=order_id).exists() and Orders.objects.filter(cooked=True,id=order_id).exists():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "isCooked",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def isCooked(order_id):\n    if Orders.objects.filter(notify_cooksDone=True,id=order_id).exists() and Orders.objects.filter(notify_cooks=True,id=order_id).exists() and Orders.objects.filter(cooked=True,id=order_id).exists():\n        return True\n    return False\n@sync_to_async\ndef isReady(order_id):\n    if Orders.objects.filter(notify_pickersDone=True,id=order_id).exists() and Orders.objects.filter(notify_pickers=True,id=order_id).exists() and Orders.objects.filter(ready=True,id=order_id).exists():\n        return True\n    return False\n@sync_to_async",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "isReady",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def isReady(order_id):\n    if Orders.objects.filter(notify_pickersDone=True,id=order_id).exists() and Orders.objects.filter(notify_pickers=True,id=order_id).exists() and Orders.objects.filter(ready=True,id=order_id).exists():\n        return True\n    return False\n@sync_to_async\ndef isDelivered(order_id):\n    if Orders.objects.filter(deliveredDone=True,id=order_id).exists() and Orders.objects.filter(delivered=True,id=order_id).exists() and Orders.objects.filter(deliveredSucces=True,id=order_id).exists():\n        return True\n    return False\n#  Создан новый заказ и надо передать в готовку",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "isDelivered",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def isDelivered(order_id):\n    if Orders.objects.filter(deliveredDone=True,id=order_id).exists() and Orders.objects.filter(delivered=True,id=order_id).exists() and Orders.objects.filter(deliveredSucces=True,id=order_id).exists():\n        return True\n    return False\n#  Создан новый заказ и надо передать в готовку\n@sync_to_async\ndef notify_cooks_for_new_order(order_id):\n    if Orders.objects.filter(notify_cooksDone=False,id=order_id).exists():\n        order = Orders(id=order_id)\n        notify_cooks = True",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "notify_cooks_for_new_order",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def notify_cooks_for_new_order(order_id):\n    if Orders.objects.filter(notify_cooksDone=False,id=order_id).exists():\n        order = Orders(id=order_id)\n        notify_cooks = True\n        order.save()\n        return True\n    return False\n@sync_to_async\ndef notify_user_about_cooking(order_id):\n    if Orders.objects.filter(notify_cooksDone=True,id=order_id).exists() and cooked.objects.filter(cooked=True,id=order_id).exists():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "notify_user_about_cooking",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def notify_user_about_cooking(order_id):\n    if Orders.objects.filter(notify_cooksDone=True,id=order_id).exists() and cooked.objects.filter(cooked=True,id=order_id).exists():\n        order = Orders(id=order_id)\n        cooking_notifyed_user = True\n        order.save()\n        return True\n    return False\n@sync_to_async\ndef notify_pickers_for_new_order(order_id):\n    if Orders.objects.filter(notify_pickersDone=False,id=order_id).exists():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "notify_pickers_for_new_order",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def notify_pickers_for_new_order(order_id):\n    if Orders.objects.filter(notify_pickersDone=False,id=order_id).exists():\n        order = Orders(id=order_id)\n        notify_pickers = True\n        order.save()\n        return True\n    return False\n@sync_to_async\ndef notify_user_about_cooking(order_id):\n    if Orders.objects.filter(notify_cooksDone=True,id=order_id).exists() and cooked.objects.filter(cooked=True,id=order_id).exists():",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "notify_user_about_cooking",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def notify_user_about_cooking(order_id):\n    if Orders.objects.filter(notify_cooksDone=True,id=order_id).exists() and cooked.objects.filter(cooked=True,id=order_id).exists():\n        order = Orders(id=order_id)\n        cooking_notifyed_user = True\n        order.save()\n        return True\n    return False\n@sync_to_async\ndef create_order(data):\n    # Разбираем данные заказа",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "create_order",
        "kind": 2,
        "importPath": "main.tg_bot.database",
        "description": "main.tg_bot.database",
        "peekOfCode": "def create_order(data):\n    # Разбираем данные заказа\n    order_data = json.loads(data['order_data'])\n    address = data['address']\n    time_data = data['time_data']\n    number = data['number']\n    payment = data['payment']\n    get_way = data['get_way']\n    ingredients_list = []\n    compounds_list = []",
        "detail": "main.tg_bot.database",
        "documentation": {}
    },
    {
        "label": "admin_panel",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def admin_panel() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text='Статистика', callback_data='statistics')\n    keyboard.button(text='Рассылка', callback_data='mailing')\n    keyboard.button(text='Добавить позицию', callback_data='add_position')\n    keyboard.button(text='Удалить позицию', callback_data='delete_position')\n    return keyboard.adjust(1).as_markup()\ndef order_delivered(num) -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text='Заказ доставлен', callback_data=f'order_d_{num}')",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "order_delivered",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def order_delivered(num) -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text='Заказ доставлен', callback_data=f'order_d_{num}')\n    return keyboard.adjust(1).as_markup()\ndef get_pay(confirmation_url,amount,pay_id,order_id) -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text=f'💳 Банковская карта {amount} ₽', web_app=WebAppInfo(text='Начать',url=confirmation_url))\n    keyboard.button(text='Проверить', callback_data=f'check_{order_id}_{pay_id}')\n    return keyboard.adjust(1).as_markup()\nstart_menu = ReplyKeyboardMarkup(",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "get_pay",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def get_pay(confirmation_url,amount,pay_id,order_id) -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text=f'💳 Банковская карта {amount} ₽', web_app=WebAppInfo(text='Начать',url=confirmation_url))\n    keyboard.button(text='Проверить', callback_data=f'check_{order_id}_{pay_id}')\n    return keyboard.adjust(1).as_markup()\nstart_menu = ReplyKeyboardMarkup(\n    keyboard=[\n        [\n            KeyboardButton(text='Начать 🍕',  web_app=WebAppInfo(text='Начать',url='https://pizzafresca.ru'))\n        ],",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "get_order_post",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def get_order_post() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    # url: str = 'https://www.figma.com/design/DZ86D3MECMXG1bEdZH1WgB/Untitled?node-id=0-1&t=GDOZf8b5XlANPEzd-0'\n    keyboard.button(text='Заказать', web_app=WebAppInfo(text='Заказать',url='https://google.com') )\n    return keyboard.adjust(1).as_markup()\nORDERS_PER_PAGE = 25\nasync def list_orders(tg_id, page=1) -> InlineKeyboardMarkup:\n    start_idx = (page - 1) * ORDERS_PER_PAGE\n    end_idx = start_idx + ORDERS_PER_PAGE\n    orders = await fetch_orders(tg_id, start_idx, end_idx)",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "add_categories",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def add_categories() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text='Пиццы', callback_data='add_pizza')\n    keyboard.button(text='Десерты', callback_data='add_desserts')\n    keyboard.button(text='Салаты', callback_data='add_salads')\n    keyboard.button(text='Супы', callback_data='add_soups')\n    keyboard.button(text='Напитки', callback_data='add_Drinks')\n    keyboard.button(text='Выйти', callback_data='add_come_out')\n    return keyboard.adjust(2).as_markup()\ndef delete_categories() -> InlineKeyboardMarkup:",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "delete_categories",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def delete_categories() -> InlineKeyboardMarkup:\n    keyboard = InlineKeyboardBuilder()\n    keyboard.button(text='Пиццы', callback_data='delete_pizza')\n    keyboard.button(text='Десерты', callback_data='delete_desserts')\n    keyboard.button(text='Салаты', callback_data='delete_salads')\n    keyboard.button(text='Супы', callback_data='delete_soups')\n    keyboard.button(text='Напитки', callback_data='delete_Drinks')\n    keyboard.button(text='Выйти', callback_data='delete_come_out')\n    return keyboard.adjust(2).as_markup()\ndef offer_cancel() -> ReplyKeyboardMarkup:",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "offer_cancel",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def offer_cancel() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Вернуться')\n    return keyboard.as_markup(resize_keyboard=True)\ndef choice_button_yes() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да, выполнить')\n    keyboard.button(text='Нет, вернуться')\n    return keyboard.as_markup(resize_keyboard=True)\ndef post_type() -> ReplyKeyboardMarkup:",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "choice_button_yes",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def choice_button_yes() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да, выполнить')\n    keyboard.button(text='Нет, вернуться')\n    return keyboard.as_markup(resize_keyboard=True)\ndef post_type() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Только текст')\n    keyboard.button(text='С фото')\n    return keyboard.as_markup(resize_keyboard=True)",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "post_type",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def post_type() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Только текст')\n    keyboard.button(text='С фото')\n    return keyboard.as_markup(resize_keyboard=True)\ndef choice_button_no() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да, выполнить')\n    keyboard.button(text='Нет, вернуться')\n    return keyboard.as_markup(resize_keyboard=True)",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "choice_button_no",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def choice_button_no() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Да, выполнить')\n    keyboard.button(text='Нет, вернуться')\n    return keyboard.as_markup(resize_keyboard=True)\ndef skip_geo2() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Пропустить')\n    return keyboard.as_markup(resize_keyboard=True)\ndef shipping_method() -> ReplyKeyboardMarkup:",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "skip_geo2",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def skip_geo2() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Пропустить')\n    return keyboard.as_markup(resize_keyboard=True)\ndef shipping_method() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='🚚 Доставка')\n    keyboard.button(text='📍 Самовывоз')\n    return keyboard.as_markup(resize_keyboard=True)\nget_geo = ReplyKeyboardMarkup(",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "shipping_method",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def shipping_method() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='🚚 Доставка')\n    keyboard.button(text='📍 Самовывоз')\n    return keyboard.as_markup(resize_keyboard=True)\nget_geo = ReplyKeyboardMarkup(\n    keyboard=[\n        [\n            KeyboardButton(text='❗️ Прислать адрес', request_location=True)\n        ],",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "fast_delivery",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def fast_delivery() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Как можно скорее')\n    keyboard.button(text='Вернуться')\n    return keyboard.as_markup(resize_keyboard=True)\nget_number = ReplyKeyboardMarkup(\n    keyboard=[\n        [\n            KeyboardButton(text='📱 Отправить телефон', request_contact=True)\n        ],",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "get_comment",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def get_comment() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Пропустить')\n    keyboard.button(text='Вернуться')\n    return keyboard.as_markup(resize_keyboard=True)\ndef payments() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Юкасса')\n    keyboard.button(text='При получении')\n    keyboard.button(text='Вернуться')",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "payments",
        "kind": 2,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "def payments() -> ReplyKeyboardMarkup:\n    keyboard = ReplyKeyboardBuilder()\n    keyboard.button(text='Юкасса')\n    keyboard.button(text='При получении')\n    keyboard.button(text='Вернуться')\n    return keyboard.as_markup(resize_keyboard=True)",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "start_menu",
        "kind": 5,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "start_menu = ReplyKeyboardMarkup(\n    keyboard=[\n        [\n            KeyboardButton(text='Начать 🍕',  web_app=WebAppInfo(text='Начать',url='https://pizzafresca.ru'))\n        ],\n        [\n            KeyboardButton(text='Мои заказы ℹ️')\n        ],\n    ],\n    resize_keyboard=True",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "ORDERS_PER_PAGE",
        "kind": 5,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "ORDERS_PER_PAGE = 25\nasync def list_orders(tg_id, page=1) -> InlineKeyboardMarkup:\n    start_idx = (page - 1) * ORDERS_PER_PAGE\n    end_idx = start_idx + ORDERS_PER_PAGE\n    orders = await fetch_orders(tg_id, start_idx, end_idx)\n    total_orders = await count_orders(tg_id)\n    keyboard = InlineKeyboardBuilder()\n    for order in orders:\n        a = str(order.get_status_display())\n        if a==\"Cooking\":",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "get_geo",
        "kind": 5,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "get_geo = ReplyKeyboardMarkup(\n    keyboard=[\n        [\n            KeyboardButton(text='❗️ Прислать адрес', request_location=True)\n        ],\n        [\n            KeyboardButton(text='Вернуться в меню')\n        ],\n    ],\n    resize_keyboard=True",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "get_number",
        "kind": 5,
        "importPath": "main.tg_bot.reply",
        "description": "main.tg_bot.reply",
        "peekOfCode": "get_number = ReplyKeyboardMarkup(\n    keyboard=[\n        [\n            KeyboardButton(text='📱 Отправить телефон', request_contact=True)\n        ],\n        [\n            KeyboardButton(text='Вернуться')\n        ],\n    ],\n    resize_keyboard=True",
        "detail": "main.tg_bot.reply",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "peekOfCode": "def create(prices,chat_id):\n    idempotence_key = str(uuid.uuid4())\n    payment = Payment.create({\n            \"amount\": {\n                \"value\": f\"{prices}\",\n                \"currency\": \"RUB\"\n            },\n            \"payment_method_data\": {\n                \"type\": \"bank_card\"\n            },",
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "peekOfCode": "def check(payment_id):\n    payment = Payment.find_one(payment_id)\n    if payment.status == 'succeeded':\n        return False\n    else:\n        return payment.metadata\n@user_private.callback_query(F.data.startswith(\"order_d_\"))\nasync def order_delivered_point(callback: CallbackQuery):\n    order_id = callback.data.split(\"_\")[2]\n    is_delivered_updated = await d_success(order_id=order_id)",
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "user_private",
        "kind": 5,
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "peekOfCode": "user_private = Router()\nimport uuid\nfrom yookassa import Configuration, Payment\nConfiguration.account_id = os.environ.get('ACCOUNT_ID')\nConfiguration.secret_key = os.environ.get('SECRET_KEY')\nYOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID')\nYOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY')\ndef create(prices,chat_id):\n    idempotence_key = str(uuid.uuid4())\n    payment = Payment.create({",
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "Configuration.account_id",
        "kind": 5,
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "peekOfCode": "Configuration.account_id = os.environ.get('ACCOUNT_ID')\nConfiguration.secret_key = os.environ.get('SECRET_KEY')\nYOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID')\nYOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY')\ndef create(prices,chat_id):\n    idempotence_key = str(uuid.uuid4())\n    payment = Payment.create({\n            \"amount\": {\n                \"value\": f\"{prices}\",\n                \"currency\": \"RUB\"",
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "Configuration.secret_key",
        "kind": 5,
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "peekOfCode": "Configuration.secret_key = os.environ.get('SECRET_KEY')\nYOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID')\nYOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY')\ndef create(prices,chat_id):\n    idempotence_key = str(uuid.uuid4())\n    payment = Payment.create({\n            \"amount\": {\n                \"value\": f\"{prices}\",\n                \"currency\": \"RUB\"\n            },",
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "YOOKASSA_SHOP_ID",
        "kind": 5,
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "peekOfCode": "YOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID')\nYOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY')\ndef create(prices,chat_id):\n    idempotence_key = str(uuid.uuid4())\n    payment = Payment.create({\n            \"amount\": {\n                \"value\": f\"{prices}\",\n                \"currency\": \"RUB\"\n            },\n            \"payment_method_data\": {",
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "YOOKASSA_SECRET_KEY",
        "kind": 5,
        "importPath": "main.tg_bot.user_private",
        "description": "main.tg_bot.user_private",
        "peekOfCode": "YOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY')\ndef create(prices,chat_id):\n    idempotence_key = str(uuid.uuid4())\n    payment = Payment.create({\n            \"amount\": {\n                \"value\": f\"{prices}\",\n                \"currency\": \"RUB\"\n            },\n            \"payment_method_data\": {\n                \"type\": \"bank_card\"",
        "detail": "main.tg_bot.user_private",
        "documentation": {}
    },
    {
        "label": "MainConfig",
        "kind": 6,
        "importPath": "main.apps",
        "description": "main.apps",
        "peekOfCode": "class MainConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'main'",
        "detail": "main.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class User(models.Model):\n    tg_id = models.BigIntegerField('Telegram ID')\n    isActive = models.BooleanField('Активен', default=False)\n    phone_number = models.CharField('Номер телефона', max_length=200, default=\"Неизвестно\")\n    list_per_page = 500\n    def __str__(self):\n        return str(self.tg_id)\n    class Meta:\n        verbose_name = 'Пользователь'\n        verbose_name_plural = 'Пользователи'",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Orders",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Orders(models.Model):\n    class StatusEnum(models.TextChoices):\n        COOKING = 'CK', _('Cooking')\n        DELIVERY = 'DL', _('Delivery')\n        RECEIVED = 'RC', _('Received')\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    summa = models.CharField('Итого', max_length=200)\n    paid = models.BooleanField('Оплачен', default=False)\n    address = models.TextField('Адрес клиента', default=\"Без адреса\", blank=True)\n    pay = models.CharField('Способ оплаты', max_length=250)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Position(models.Model):\n    order = models.ForeignKey(Orders, related_name='position', on_delete=models.CASCADE)\n    name = models.CharField('Имя', max_length=100)\n    price = models.DecimalField('Цена', max_digits=10, decimal_places=2)\n    ingredients = models.TextField('Ингридиенты')\n    cooked = models.BooleanField('Говто', default=False)\n    compounds = models.TextField('Долонительное', default='null')\n    quantity = models.BigIntegerField()\n    list_per_page = 500\n    def __str__(self):",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField('Имя категории', max_length=100)\n    list_per_page = 500\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name = 'Категория'\n        verbose_name_plural = 'Катергории'\nclass Menu(models.Model):\n    photo = models.ImageField('Фото', upload_to='static/media/menu_photos/')",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Menu(models.Model):\n    photo = models.ImageField('Фото', upload_to='static/media/menu_photos/')\n    name = models.CharField('Имя', max_length=250)\n    weight = models.CharField('Вес в граммах', max_length=250)\n    allergens = models.TextField('Аллергены', default=\"Без аллергенов\")\n    energy_valuable = models.CharField('Энерг. ценность', max_length=100)\n    compounds = models.TextField('Список блюд', default=\"Ингединты\")\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    list_per_page = 100",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Сompound",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Сompound(models.Model):\n    photo = models.ImageField('Фото', upload_to='static/media/compound_photos/')\n    name = models.CharField('Имя', max_length=250)\n    weight = models.CharField('Вес в граммах', max_length=250)\n    quantity = models.CharField('Количество', max_length=250)\n    dish = models.ForeignKey(Menu, on_delete=models.CASCADE, default=1)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    price = models.DecimalField('Цена', max_digits=10, decimal_places=2)\n    list_per_page = 500\n    def __str__(self):",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Ingredients",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Ingredients(models.Model):\n    name = models.CharField('Имя', max_length=250)\n    dish = models.ForeignKey(Menu, on_delete=models.CASCADE, default=1)\n    isInDish = models.BooleanField(default=True)\n    list_per_page = 500\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name = 'Ингредиент'\n        verbose_name_plural = 'Ингредиенты'",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Admins",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Admins(models.Model):\n    tg_id = models.BigIntegerField('Админы')\n    list_per_page = 500\n    def __str__(self):\n        return str(self.tg_id)\n    class Meta:\n        verbose_name = 'Админ'\n        verbose_name_plural = 'Админы'\nclass Couriers(models.Model):\n    tg_id = models.BigIntegerField('Курьеры')",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Couriers",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Couriers(models.Model):\n    tg_id = models.BigIntegerField('Курьеры')\n    withOrder = models.BooleanField('С заказом')\n    list_per_page = 500\n    def __str__(self):\n        return str(self.tg_id)\n    class Meta:\n        verbose_name = 'Курьер'\n        verbose_name_plural = 'Курьеры'\nclass Order_list(models.Model):",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Order_list",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Order_list(models.Model):\n    tg_id = models.BigIntegerField('User iId')\n    withOrder = models.TextField('Текст')\n    def __str__(self):\n        return str(self.tg_id)\n    class Meta:\n        verbose_name = 'список заказов'\n        verbose_name_plural = 'списки заказов'",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\nclass OrdersSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Orders\n        fields = '__all__'\nclass PositionSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "OrdersSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class OrdersSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Orders\n        fields = '__all__'\nclass PositionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Position\n        fields = '__all__'\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "PositionSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class PositionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Position\n        fields = '__all__'\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\nclass MenuSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\nclass MenuSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Menu\n        fields = '__all__'\nclass СompoundSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "MenuSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class MenuSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Menu\n        fields = '__all__'\nclass СompoundSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Сompound\n        fields = '__all__'\nclass IngredientsSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "СompoundSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class СompoundSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Сompound\n        fields = '__all__'\nclass IngredientsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ingredients\n        fields = '__all__'",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientsSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class IngredientsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ingredients\n        fields = '__all__'",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'users', UserViewSet)\nrouter.register(r'orders', OrdersViewSet)\nrouter.register(r'positions', PositionViewSet)\nrouter.register(r'categories', CategoryViewSet)\nrouter.register(r'menu', MenuViewSet)\nrouter.register(r'compounds', СompoundViewSet)\nrouter.register(r'ingredients', IngredientsViewSet)\nurlpatterns = [\n    path('', include(router.urls)),",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\nclass OrdersViewSet(viewsets.ModelViewSet):\n    queryset = Orders.objects.all()\n    serializer_class = OrdersSerializer\n    def update(self, request, *args, **kwargs):\n        instance = self.get_object()\n        old_cooked = instance.cooked\n        old_ready = instance.ready",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "OrdersViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class OrdersViewSet(viewsets.ModelViewSet):\n    queryset = Orders.objects.all()\n    serializer_class = OrdersSerializer\n    def update(self, request, *args, **kwargs):\n        instance = self.get_object()\n        old_cooked = instance.cooked\n        old_ready = instance.ready\n        old_delivered = instance.deliveredSucces\n        # Обновляем заказ\n        response = super().update(request, *args, **kwargs)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "PositionViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class PositionViewSet(viewsets.ModelViewSet):\n    queryset = Position.objects.all()\n    serializer_class = PositionSerializer\nclass CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass MenuViewSet(viewsets.ModelViewSet):\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\nclass СompoundViewSet(viewsets.ModelViewSet):",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass MenuViewSet(viewsets.ModelViewSet):\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\nclass СompoundViewSet(viewsets.ModelViewSet):\n    queryset = Сompound.objects.all()\n    serializer_class = СompoundSerializer\nclass IngredientsViewSet(viewsets.ModelViewSet):",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "MenuViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class MenuViewSet(viewsets.ModelViewSet):\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\nclass СompoundViewSet(viewsets.ModelViewSet):\n    queryset = Сompound.objects.all()\n    serializer_class = СompoundSerializer\nclass IngredientsViewSet(viewsets.ModelViewSet):\n    queryset = Ingredients.objects.all()\n    serializer_class = IngredientsSerializer",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "СompoundViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class СompoundViewSet(viewsets.ModelViewSet):\n    queryset = Сompound.objects.all()\n    serializer_class = СompoundSerializer\nclass IngredientsViewSet(viewsets.ModelViewSet):\n    queryset = Ingredients.objects.all()\n    serializer_class = IngredientsSerializer",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "IngredientsViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class IngredientsViewSet(viewsets.ModelViewSet):\n    queryset = Ingredients.objects.all()\n    serializer_class = IngredientsSerializer",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "finish_all_tasks",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def finish_all_tasks(tasks):\n    for task in tasks:\n        if not task.done():\n            task.cancel()\nasync def main():\n    tasks = [\n        asyncio.create_task(start_bot()),\n        #asyncio.create_task(start_tracking_orders()),\n    ]\n    tasks[0].add_done_callback(lambda x: finish_all_tasks(tasks))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "environ['DJANGO_SETTINGS_MODULE'] = 'backend.settings'\ndjango.setup()\nfrom aiogram import Dispatcher, Bot\nfrom aiogram.types import BotCommandScopeAllPrivateChats\nfrom aiogram.client.bot import DefaultBotProperties\nfrom aiogram.enums import ParseMode\nfrom api.tg_bot.track_orders import notify_user\nload_dotenv()\nbot = Bot('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I', default=DefaultBotProperties(parse_mode=ParseMode.HTML))\ndp = Dispatcher()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot = Bot('8090358352:AAHqI7UIDxQSgAr0MUKug8Ixc0OeozWGv7I', default=DefaultBotProperties(parse_mode=ParseMode.HTML))\ndp = Dispatcher()\nasync def start_bot():\n    from api.tg_bot.admin_private import admin_private\n    from api.tg_bot.user_private import user_private\n    dp.include_routers(user_private, admin_private)\n    await bot.delete_webhook(drop_pending_updates=True)\n    await dp.start_polling(bot)\nasync def start_tracking_orders():\n    while True:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "dp = Dispatcher()\nasync def start_bot():\n    from api.tg_bot.admin_private import admin_private\n    from api.tg_bot.user_private import user_private\n    dp.include_routers(user_private, admin_private)\n    await bot.delete_webhook(drop_pending_updates=True)\n    await dp.start_polling(bot)\nasync def start_tracking_orders():\n    while True:\n        await asyncio.sleep(20)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "tests",
        "description": "tests",
        "peekOfCode": "BASE_URL = 'https://pizzafresca.ru/api/orders/'\n# ID заказа, который вы хотите изменить\nORDER_ID = 14\n# Получите текущий заказ\nresponse = requests.get(f\"{BASE_URL}{ORDER_ID}/\")\norder = response.json()\nprint(f\"Current 'cooked' status: {order['cooked']}\")\norder['ready'] = True\nresponse = requests.put(f\"{BASE_URL}{ORDER_ID}/\", json=order)\nif response.status_code == 200:",
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "ORDER_ID",
        "kind": 5,
        "importPath": "tests",
        "description": "tests",
        "peekOfCode": "ORDER_ID = 14\n# Получите текущий заказ\nresponse = requests.get(f\"{BASE_URL}{ORDER_ID}/\")\norder = response.json()\nprint(f\"Current 'cooked' status: {order['cooked']}\")\norder['ready'] = True\nresponse = requests.put(f\"{BASE_URL}{ORDER_ID}/\", json=order)\nif response.status_code == 200:\n    print(\"Order updated successfully!\")\n    updated_order = response.json()",
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "tests",
        "description": "tests",
        "peekOfCode": "response = requests.get(f\"{BASE_URL}{ORDER_ID}/\")\norder = response.json()\nprint(f\"Current 'cooked' status: {order['cooked']}\")\norder['ready'] = True\nresponse = requests.put(f\"{BASE_URL}{ORDER_ID}/\", json=order)\nif response.status_code == 200:\n    print(\"Order updated successfully!\")\n    updated_order = response.json()\n    print(f\"New 'cooked' status: {updated_order['cooked']}\")\nelse:",
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "tests",
        "description": "tests",
        "peekOfCode": "order = response.json()\nprint(f\"Current 'cooked' status: {order['cooked']}\")\norder['ready'] = True\nresponse = requests.put(f\"{BASE_URL}{ORDER_ID}/\", json=order)\nif response.status_code == 200:\n    print(\"Order updated successfully!\")\n    updated_order = response.json()\n    print(f\"New 'cooked' status: {updated_order['cooked']}\")\nelse:\n    print(40444)",
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "order['ready']",
        "kind": 5,
        "importPath": "tests",
        "description": "tests",
        "peekOfCode": "order['ready'] = True\nresponse = requests.put(f\"{BASE_URL}{ORDER_ID}/\", json=order)\nif response.status_code == 200:\n    print(\"Order updated successfully!\")\n    updated_order = response.json()\n    print(f\"New 'cooked' status: {updated_order['cooked']}\")\nelse:\n    print(40444)",
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "tests",
        "description": "tests",
        "peekOfCode": "response = requests.put(f\"{BASE_URL}{ORDER_ID}/\", json=order)\nif response.status_code == 200:\n    print(\"Order updated successfully!\")\n    updated_order = response.json()\n    print(f\"New 'cooked' status: {updated_order['cooked']}\")\nelse:\n    print(40444)",
        "detail": "tests",
        "documentation": {}
    }
]