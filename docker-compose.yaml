services:
  postgresql:
    image: postgresql
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgresql:/var/lib/postgresql/data

  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - ROOT_DOMAIN=http://127.0.0.1:8000
    ports:
      - 8000:8000
    depends_on:
      - postgresql

  frontend:
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    depends_on:
      - backend
    volumes:
      - './frontend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'

  gateway:
    restart: always
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - 9088:9088
      - 443:443
    volumes:
      - './gateway/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
      - '/etc/letsencrypt/live/skybox.video/cert.pem:/etc/nginx/certs/cert.pem:ro'
      - '/etc/letsencrypt/live/skybox.video/chain.pem:/etc/nginx/certs/chain.pem:ro'
      - '/etc/letsencrypt/live/skybox.video/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro'
      - '/etc/letsencrypt/live/skybox.video/privkey.pem:/etc/nginx/certs/privkey.pem:ro'
    depends_on:
      - backend
      - frontend

  bot:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.aiogram
    depends_on:
      - backend

volumes:
  postgresql:
